"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4872],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(t),d=i,h=c["".concat(s,".").concat(d)]||c[d]||m[d]||r;return t?a.createElement(h,l(l({ref:n},u),{},{components:t})):a.createElement(h,l({ref:n},u))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[c]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7147:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=t(7462),i=(t(7294),t(3905));const r={slug:"umgidioms",title:"UMG Idioms",tags:["coding","umg"]},l="UMG Idioms",o={permalink:"/blog/umgidioms",source:"@site/blog/2023-09-30_umg_idioms.md",title:"UMG Idioms",description:"A list of idioms for the UMG ecosystem.",date:"2023-09-30T00:00:00.000Z",formattedDate:"September 30, 2023",tags:[{label:"coding",permalink:"/blog/tags/coding"},{label:"umg",permalink:"/blog/tags/umg"}],readingTime:3.24,hasTruncateMarker:!0,authors:[],frontMatter:{slug:"umgidioms",title:"UMG Idioms",tags:["coding","umg"]},prevItem:{title:"Results orientated gamedev, and why it's bad",permalink:"/blog/results_orientated_gamedev"},nextItem:{title:"How should we represent entity properties?",permalink:"/blog/properties"}},s={authorsImageUrls:[]},p=[],u={toc:p},c="wrapper";function m(e){let{components:n,...t}=e;return(0,i.kt)(c,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"A list of idioms for the UMG ecosystem."),(0,i.kt)("hr",null),(0,i.kt)("h1",{id:"checking-if-an-entity-has-a-component"},"Checking if an entity has a component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'if ent.foo then\n    print("entity has component foo!")\nend\n')),(0,i.kt)("p",null,"This is the same as ",(0,i.kt)("inlineCode",{parentName:"p"},'ent:hasComponent("foo")')),(0,i.kt)("hr",null),(0,i.kt)("h1",{id:"base-mod-files"},"Base-mod files:"),(0,i.kt)("p",null,"These files aren't compulsory, but it is common practice to put them in base mods:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"mod/components.md")," - defines the components for this mod, in markdown",(0,i.kt)("br",null),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"mod/mod_questions.lua")," - where ",(0,i.kt)("inlineCode",{parentName:"p"},"umg.defineQuestion")," is used",(0,i.kt)("br",null),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"mod/mod_events.lua")," - where ",(0,i.kt)("inlineCode",{parentName:"p"},"umg.defineEvent")," is used",(0,i.kt)("br",null)),(0,i.kt)("hr",null),(0,i.kt)("h1",{id:"runtime-clientserver-checks"},"Runtime client/server checks:"),(0,i.kt)("p",null,"Often, we will have code that is running on BOTH client-side AND server-side.",(0,i.kt)("br",null),"\n(For example, the ",(0,i.kt)("inlineCode",{parentName:"p"},"onDeath")," callback)"),(0,i.kt)("p",null,"To get server/client specific behaviour, we can check what side we are on at runtime!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local function onDeath(ent)\n    -- called on client AND server.\n    if server then\n        -- this branch is only ran on server.\n        print("I AM FROM SERVER")\n    elseif client then\n        -- only ran on client! :)\n        print("hi from client!")\n    end\nend\n')),(0,i.kt)("p",null,"You get the idea! :)"),(0,i.kt)("hr",null),(0,i.kt)("h1",{id:"classes"},"Classes:"),(0,i.kt)("p",null,"Lua doesn't have classes, neither does the UMG engine.",(0,i.kt)("br",null),"\nHowever, the ",(0,i.kt)("inlineCode",{parentName:"p"},"objects")," base mod provides classes:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local MyClass = objects.Class("my_mod:MyClass")\n\nfunction MyClass:init(...)\n    -- init is a special function that is called on instantiation\n    print("init!", ...)\nend\n\nfunction MyClass:method()\n    print("method call: ", self)\nend\n\nlocal obj = MyClass(1,2,3)\n-- prints:  init! 1 2 3\n')),(0,i.kt)("p",null,"The reason this is better than ",(0,i.kt)("inlineCode",{parentName:"p"},"setmetatable"),", is because ",(0,i.kt)("inlineCode",{parentName:"p"},"objects.Class"),"\nwill automatically register ",(0,i.kt)("inlineCode",{parentName:"p"},"MyClass")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"umg.register"),"."),(0,i.kt)("p",null,"(WARNING: When defining a class, make sure to define on BOTH client AND server!!!\nElse, you'll run into big bad issues.)"),(0,i.kt)("hr",null),(0,i.kt)("h1",{id:"component-wise-bus-response"},"Component-wise bus response:"),(0,i.kt)("p",null,"Listen to an event/question, and only respond if the entity has a certain component:",(0,i.kt)("br",null),"\nThis setup is VERY common (and important) in UMG."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If an entity has the ",(0,i.kt)("inlineCode",{parentName:"li"},".halo")," component:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"--\x3e draw a circle above it.")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'umg.on("rendering:drawEntity", function(ent)\n    if ent.halo then\n        -- draw a halo above the entity!\n        love.graphics.circle("line", ent.x, ent.y - 10, 5)\n    end\nend)\n')),(0,i.kt)("p",null,"Comp-wise bus response also works with question buses too:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If an entity is covered in goo:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"--\x3e slow the entity")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'umg.answer("xy:getSpeedMultiplier", function(ent)\n    if ent.goo then\n        return 0.5\n    end\n    return 1\nend)\n')),(0,i.kt)("hr",null),(0,i.kt)("h1",{id:"entity-inheritance"},"Entity inheritance:"),(0,i.kt)("p",null,'Sometimes, we may want to define an entity "base class", and extend it for a bunch of similar entity-types.'),(0,i.kt)("p",null,"We can do this by defining a function that mutates an entity definition:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- shared/abstract_entities.lua\n\n-- make sure its global!\nfunction enemyType(etype)\n    etype.category = "enemy",\n    etype.attack = etype.attack or {\n        type = "melee",\n        range = MELEE_RANGE\n    };\nend\n')),(0,i.kt)("p",null,"And then, when we define our entities, we can access our global function ",(0,i.kt)("inlineCode",{parentName:"p"},"enemyType"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- entities/my_enemy.lua\n\nreturn enemyType({\n    image = "enemy1",\n    baseMaxHealth = 100,\n    baseStrength = 30\n})\n')),(0,i.kt)("p",null,"You get the idea :)"),(0,i.kt)("hr",null),(0,i.kt)("h1",{id:"functions-in-components"},"Functions in components:"),(0,i.kt)("p",null,"You may be horrified to realize that in UMG, doing this on serverside will cause a runtime error:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"ent.myComponent = function() end\n")),(0,i.kt)("p",null,"This is because in UMG, newly defined components are automatically sent over the network.",(0,i.kt)("br",null),"\nAnd in UMG, functions can't be serialized; so an error is thrown."),(0,i.kt)("p",null,"But we ",(0,i.kt)("em",{parentName:"p"},"can")," have functions as shared components, by defining them inside the entity type.",(0,i.kt)("br",null),"\nThis is because shared-components aren't sent over the network."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"-- my_mod/entities/my_entity.lua\nreturn {\n    myComponent = function() end\n    -- this is ok! :)\n\n    ...\n}\n")),(0,i.kt)("hr",null),(0,i.kt)("h1",{id:"typecheck-naming-convention"},"Typecheck naming convention:"),(0,i.kt)("p",null,"When using ",(0,i.kt)("inlineCode",{parentName:"p"},"typecheck")," mod, it's common to end the typecheck function with ",(0,i.kt)("inlineCode",{parentName:"p"},"Tc"),".",(0,i.kt)("br",null),"\nFor example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local addTc = typecheck.assert("number", "number")\n')),(0,i.kt)("p",null,"(The ",(0,i.kt)("inlineCode",{parentName:"p"},"Tc"),' stands for "type check")'),(0,i.kt)("hr",null),(0,i.kt)("h1",{id:"method-event-in-base-mods"},"Method-Event in base mods:"),(0,i.kt)("p",null,"When an event happens concerning an entity, it's common to do something like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- ent dies!\nlocal function die(ent)\n    if ent.onDeath then\n        ent:onDeath()\n    end\n    umg.call("mod:onDeath", ent)\nend\n')),(0,i.kt)("p",null,"This is quite flexible, since it allows for other systems to tag onto the death event, but it also allows entity-specific behaviour through our ",(0,i.kt)("inlineCode",{parentName:"p"},"onDeath")," shared component."),(0,i.kt)("p",null,"Examples of this: ",(0,i.kt)("inlineCode",{parentName:"p"},"mortality:entityDeath"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"rendering:drawEntity")))}m.isMDXComponent=!0}}]);