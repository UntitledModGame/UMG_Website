"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7112],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(n),h=r,d=m["".concat(p,".").concat(h)]||m[h]||u[h]||o;return n?a.createElement(d,i(i({ref:t},c),{},{components:n})):a.createElement(d,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=h;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3028:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={slug:"component_projection",title:"What is component-projection?",tags:["design","umg"]},i=void 0,l={permalink:"/blog/component_projection",source:"@site/blog/2024-03-26_component_projection.md",title:"What is component-projection?",description:"What is component-projection in Untitled Mod Game?",date:"2024-03-26T00:00:00.000Z",formattedDate:"March 26, 2024",tags:[{label:"design",permalink:"/blog/tags/design"},{label:"umg",permalink:"/blog/tags/umg"}],readingTime:3.1,hasTruncateMarker:!0,authors:[],frontMatter:{slug:"component_projection",title:"What is component-projection?",tags:["design","umg"]},prevItem:{title:"The Art of Assumptions",permalink:"/blog/art_of_assumptions"},nextItem:{title:"Heisenbug in UMG!",permalink:"/blog/heisenbug"}},p={authorsImageUrls:[]},s=[{value:"Taking it a step further- Values-projection:",id:"taking-it-a-step-further--values-projection",level:2}],c={toc:s},m="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"What is component-projection in Untitled Mod Game?"),(0,r.kt)("p",null,'"Component-projection" is a special feature that I use for my ECS in UMG.'),(0,r.kt)("p",null,"It's (kinda?) similar to inheritance in OOP; except, it occurs on components, as opposed to objects."),(0,r.kt)("p",null,"At it's most basic level, component-projection is when one component forces another component to exist, by creating the target component automatically."),(0,r.kt)("p",null,"Example:",(0,r.kt)("br",{parentName:"p"}),"\n","Lets say we have a generic ",(0,r.kt)("inlineCode",{parentName:"p"},"drawable")," component, that is attached to any entity that is drawable.  "),(0,r.kt)("p",null,"With this, we could have a few different components: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'-- all things that can be drawn!\nent.image = "monkey.png"\nent.particles = Particles()\nent.circle = {radius=5}\n')),(0,r.kt)("p",null,'With component-projection, we would have each of these components "project" to the drawable component:'),(0,r.kt)("mermaid",{value:"graph TD;\n    image --\x3e drawable\n    particles --\x3e drawable\n    circle --\x3e drawable"}),(0,r.kt)("p",null,"How this works in practice, is that entities are automatically granted a ",(0,r.kt)("inlineCode",{parentName:"p"},"drawable")," component IF they have ANY of the listed components."),(0,r.kt)("p",null,"So when you do this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'ent.image = "bat.png"\n')),(0,r.kt)("p",null,"It's effectively the same as doing:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'ent.image = "bat.png"\nent.drawable = true\n')),(0,r.kt)("hr",null),(0,r.kt)("p",null,"This probably smells very similar to OOP- which makes sense, because it is. Essentially, this is the exact same as an interface in OOP, but in reverse:",(0,r.kt)("br",{parentName:"p"}),"\n","With an OOP interface, the interface ",(0,r.kt)("em",{parentName:"p"},"FORCES")," methods/fields to be implemented.",(0,r.kt)("br",{parentName:"p"}),"\n","With component-projection, the methods/fields ",(0,r.kt)("em",{parentName:"p"},"FORCE")," the interface to exist.",(0,r.kt)("br",{parentName:"p"}),"\n","It's the same thing, but in reverse."),(0,r.kt)("p",null,"(This is a bit off-topic, but in UMG, we can also use ",(0,r.kt)("inlineCode",{parentName:"p"},"groups")," as component-projection mediums; which allows us to project in more complex ways.)",(0,r.kt)("br",{parentName:"p"}),"\n","That is, we can say stuff like:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'"If ent has ',(0,r.kt)("inlineCode",{parentName:"li"},"eyes")," component AND ",(0,r.kt)("inlineCode",{parentName:"li"},"ears"),' component ->"',(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},'"give entity ',(0,r.kt)("inlineCode",{parentName:"li"},"sensory"),' component"')))),(0,r.kt)("br",null),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Anyway, whats AWESOME about all this, is that we can now query entities without knowing about their particular implementation.  "),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'-- Draw System (pseudocode)\nlocal drawGroup = umg.group("drawable", "x", "y")\n\numg.on("@draw", function() {\n    -- draw all entities!\n    for ent in drawGroup {\n        drawEntity(ent)\n    }\n})\n')),(0,r.kt)("p",null,"And internally, ",(0,r.kt)("inlineCode",{parentName:"p"},"drawEntity")," would emit some event through some ",(0,r.kt)("a",{parentName:"p",href:"../buses"},"event bus"),", like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'function drawEntity(ent) {\n    -- dispatch `drawEntity` event\n    umg.call("drawEntity", ent)\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'-- Other systems listen for `drawEntity` event:\numg.on("drawEntity", function(ent) {\n    if ent.circle then\n        drawCircle(ent.x, ent.y, ent.circle)\n    end\n})\n\numg.on("drawEntity", function(ent) {\n    if ent.image then\n        drawImage(ent.x, ent.y, ent.image)\n    end\n})\n')),(0,r.kt)("p",null,"What's also amazing about this setup, is that entities can have ALL of the above components, and they will work perfectly fine.",(0,r.kt)("br",null),"\nIs that not beautiful?"),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"taking-it-a-step-further--values-projection"},"Taking it a step further- Values-projection:"),(0,r.kt)("p",null,"We can take it a step further, by providing ",(0,r.kt)("em",{parentName:"p"},"values")," for the projected component.",(0,r.kt)("br",{parentName:"p"}),"\n","Example:",(0,r.kt)("br",{parentName:"p"}),"\n","Here, we see ",(0,r.kt)("inlineCode",{parentName:"p"},"nametag --\x3e text")," projection.  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'components.project("nametag", "text", function(ent)\n    local nametag = ent.nametag\n    -- this returned table will be the VALUE\n    return {\n        scale = SCALE,\n        default = DEFAULT,\n        component = "controller",\n        oy = nametag.oy or EXTRA_OY,\n        background = BACKGROUND_COLOR,\n        disableScaling = true\n    }\nend)\n')),(0,r.kt)("p",null,"Here is a code snippet yoinked straight from the umg ecosystem.",(0,r.kt)("br",{parentName:"p"}),"\n","What's special, is that the projection is giving an actual ",(0,r.kt)("em",{parentName:"p"},"value")," to the target component.",(0,r.kt)("br",{parentName:"p"}),"\n","In this example, the ",(0,r.kt)("inlineCode",{parentName:"p"},"nametag"),' component "passes" a bunch of default values to the ',(0,r.kt)("inlineCode",{parentName:"p"},"text")," component; most notably, it tells the text component to take the value of the ",(0,r.kt)("inlineCode",{parentName:"p"},"controller")," component; (which, notably, will be the username of the player.)"),(0,r.kt)("br",null),(0,r.kt)("h1",{id:"pitfalls"},"Pitfalls:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"INCONSISTENCY:")," If multiple components project to the same component, and they both try to provide a value, only one will succeed."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"MEMORY EFFICIENCY:")," For rcomp projection, its a bit inefficient, since we need to keep track of who is currently projecting to what component in the event of removal. This involves storing an entity in a SSet per projection."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"COUPLING:")," Creates coupling between 2 components."),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("p",null,"Thankz for readin!"))}u.isMDXComponent=!0}}]);