"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1153],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),u=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=u(e.components);return r.createElement(o.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=u(n),c=a,g=p["".concat(o,".").concat(c)]||p[c]||d[c]||i;return n?r.createElement(g,s(s({ref:t},m),{},{components:n})):r.createElement(g,s({ref:t},m))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=c;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[p]="string"==typeof e?e:a,s[1]=l;for(var u=2;u<i;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1785:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const i={slug:"premature_systems",title:"Premature event listeners",tags:["design","umg"]},s=void 0,l={permalink:"/blog/premature_systems",source:"@site/blog/2024-09-23_Premature_systems.md",title:"Premature event listeners",description:"Premature event listeners in UMG, and why we should try to avoid them in the future.",date:"2024-09-23T00:00:00.000Z",formattedDate:"September 23, 2024",tags:[{label:"design",permalink:"/blog/tags/design"},{label:"umg",permalink:"/blog/tags/umg"}],readingTime:1.88,hasTruncateMarker:!0,authors:[],frontMatter:{slug:"premature_systems",title:"Premature event listeners",tags:["design","umg"]},prevItem:{title:"A New UMG",permalink:"/blog/a_new_umg"},nextItem:{title:"UMG Style Guide",permalink:"/blog/umg_style_guide"}},o={authorsImageUrls:[]},u=[{value:"Reason 1: Future systems cannot control as much.",id:"reason-1-future-systems-cannot-control-as-much",level:3},{value:"Reason 2:",id:"reason-2",level:3},{value:"FOR ALL FUTURE SYSTEMS, TRY TO AVOID DEFINING EVENT-LISTENERS PREMATURELY.",id:"for-all-future-systems-try-to-avoid-defining-event-listeners-prematurely",level:2}],m={toc:u},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Premature event listeners in UMG, and why we should try to avoid them in the future."),(0,a.kt)("p",null,"In UMG, qbuses and evbuses have been a complete godsend.",(0,a.kt)("br",{parentName:"p"}),"\n","They have allowed us to create behaviour, and ",(0,a.kt)("a",{parentName:"p",href:"/blog/DELS"},"delay the semantics")," to future systems, so future systems can have more of a say."),(0,a.kt)("p",null,"Simplified example of this-",(0,a.kt)("br",{parentName:"p"}),"\n","Rendering system:  "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'-- rendering mod:\numg.on("@draw", function()\n    for _, ent in sortedEntities(cameraDimension) do\n        umg.call("rendering:drawEntity", ent, x, y)\n    end\nend)\n')),(0,a.kt)("p",null,"And what's super-cool about this, is that we can extend the drawing\nof entities by simply tagging onto the emitted event:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'-- lootplot mod:\numg.on("rendering:drawEntity", function(ent, x, y)\n    if ent.slot and isHovered(ent) then\n        drawIndicator(ent, x, y)\n    end\nend)\n')),(0,a.kt)("hr",null),(0,a.kt)("h1",{id:"but-wait-something-about-this-is-dumb"},"But wait! Something about this is dumb!"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"rendering:drawEntity")," event is fine...",(0,a.kt)("br",{parentName:"p"}),"\n","The issue is actually the ",(0,a.kt)("inlineCode",{parentName:"p"},"@draw")," event. (For context, ",(0,a.kt)("inlineCode",{parentName:"p"},"@draw")," is an event that is emitted globally once per frame.)  "),(0,a.kt)("p",null,"Why is tagging onto ",(0,a.kt)("inlineCode",{parentName:"p"},"@draw")," bad?",(0,a.kt)("br",{parentName:"p"}),"\n","Well, 2 reasons:"),(0,a.kt)("h3",{id:"reason-1-future-systems-cannot-control-as-much"},"Reason 1: Future systems cannot control as much."),(0,a.kt)("p",null,'Lets imagine that we had a "lobby/menu" screen; where the player isn\'t actually in the game; but rather, exists within a menu.',(0,a.kt)("br",{parentName:"p"}),"\n","With this, we ideally dont WANT to render the world-entities. But we are forced to, because the system is responding to the ",(0,a.kt)("inlineCode",{parentName:"p"},"@draw")," event prematurely, and in a global-fashion."),(0,a.kt)("h3",{id:"reason-2"},"Reason 2:"),(0,a.kt)("p",null,"The game as a whole is slightly harder to understand; since events are sprawled out globally."),(0,a.kt)("h1",{id:"a-simple-alternative"},"A simple alternative:"),(0,a.kt)("p",null,"Just expose the function:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'function rendering.drawEntities()\n    for _, ent in sortedEntities(cameraDimension) do\n        umg.call("rendering:drawEntity", ent, x, y)\n    end\nend\n')),(0,a.kt)("p",null,"And then just call it directly whenever, and ",(0,a.kt)("em",{parentName:"p"},"wherever"),".",(0,a.kt)("br",{parentName:"p"}),"\n","EG:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"function GameState:draw()\n    rendering.drawEntities()\nend\n")),(0,a.kt)("p",null,"And this is amazing too, because we can also apply shaders, do fancy transformations, and do whatever pre/post-processing that we want; since ",(0,a.kt)("em",{parentName:"p"},"we control the call-site:"),"  "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"function GameState:draw()\n    applyShader()\n    doPreProcessing()\n    rendering.drawEntities()\n    doPostProcessing()\nend\n")),(0,a.kt)("p",null,"Amazing."),(0,a.kt)("p",null,"Currently in UMG, most systems are not implemented like this."),(0,a.kt)("p",null,"But they ",(0,a.kt)("em",{parentName:"p"},"definitely should be"),", and it was a mistake not to have them be like this.",(0,a.kt)("br",{parentName:"p"}),"\n","Although a big global event tree is minimalistic, elegant, and beautiful at first-sight; yielding extra control to the future-mods is SO VERY IMPORTANT in UMG."),(0,a.kt)("h2",{id:"for-all-future-systems-try-to-avoid-defining-event-listeners-prematurely"},"FOR ALL FUTURE SYSTEMS, TRY TO AVOID DEFINING EVENT-LISTENERS PREMATURELY."))}d.isMDXComponent=!0}}]);