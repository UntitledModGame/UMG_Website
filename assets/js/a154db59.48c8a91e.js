"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1642],{3905:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>c});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},h=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),u=d(n),p=i,c=u["".concat(s,".").concat(p)]||u[p]||m[p]||o;return n?a.createElement(c,r(r({ref:t},h),{},{components:n})):a.createElement(c,r({ref:t},h))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:i,r[1]=l;for(var d=2;d<o;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3669:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var a=n(7462),i=(n(7294),n(3905));const o={slug:"umgtech",title:"Technical implementation details for UMG",tags:["design","umg","coding"]},r="Technical implementation details for UMG",l={permalink:"/blog/umgtech",source:"@site/blog/2023-06-2_umg_tech_details.md",title:"Technical implementation details for UMG",description:"----------------------------",date:"2023-06-02T00:00:00.000Z",formattedDate:"June 2, 2023",tags:[{label:"design",permalink:"/blog/tags/design"},{label:"umg",permalink:"/blog/tags/umg"},{label:"coding",permalink:"/blog/tags/coding"}],readingTime:8.475,hasTruncateMarker:!0,authors:[],frontMatter:{slug:"umgtech",title:"Technical implementation details for UMG",tags:["design","umg","coding"]},prevItem:{title:"Why should I use an Entity Component System?",permalink:"/blog/ECS"},nextItem:{title:"Question buses in UMG",permalink:"/blog/buses"}},s={authorsImageUrls:[]},d=[{value:"The UMG Entity Component System:",id:"the-umg-entity-component-system",level:2},{value:"Mod communication through event buses:",id:"mod-communication-through-event-buses",level:2}],h={toc:d},u="wrapper";function m(e){let{components:t,...o}=e;return(0,i.kt)(u,(0,a.Z)({},h,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("hr",null),(0,i.kt)("p",null,'"Untitled Mod Game" (or "UMG" in short) is a multiplayer\ngame that is based on mods.'),(0,i.kt)("p",null,"I've been developing it for many months at this point, and it's been really fun!"),(0,i.kt)("p",null,"It's setup is similar to that of Garrys Mod,\nwhere most playable content is User-generated."),(0,i.kt)("hr",null),(0,i.kt)("p",null,"However, UMG seeks to take things a bit further, and address\na few issues that exist with the traditional traditional modding approach."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Traditional modding approach:")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"traditional",src:n(7697).Z,width:"388",height:"443"})),(0,i.kt)("hr",null),(0,i.kt)("p",null,'With UMG, we have two "types" of mods: "Base" and "Playable" mods.'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Base mods:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"provide tools and infrastructure for modders to create content"),(0,i.kt)("li",{parentName:"ul"},"do not provide any playable content"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Playable mods:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"provide gameplay and content")))),(0,i.kt)("p",null,'What\'s interesting about this setup, is that there is no "game".\n',(0,i.kt)("em",{parentName:"p"},"Everything")," is built as a mod.",(0,i.kt)("br",null),"\nHere's a diagram of what UMG would look like, under the same setup:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"cooperative_modding",src:n(2695).Z,width:"823",height:"445"})),(0,i.kt)("hr",null),(0,i.kt)("p",null,"But, what's the point of this?",(0,i.kt)("br",null),"\nHow is this any better than the former setup?",(0,i.kt)("br",null)),(0,i.kt)("p",null,'To explain the point of this, we need to understand what I call\n"The Riding problem".'),(0,i.kt)("h1",{id:"the-riding-problem"},"The riding problem:"),(0,i.kt)("p",null,'Lets imagine that we have 2 modders, "John" and "Mary".'),(0,i.kt)("p",null,"Mary likes elephants, so she is making an elephant riding mod.\nJohn likes horses, so he is making a mod where you can ride horses."),(0,i.kt)("p",null,"Both Mary and John go about their business, and create their mods.\nSince there is no way for John and Mary to communicate, they both code\nthe riding behaviour independently."),(0,i.kt)("p",null,"This is ",(0,i.kt)("em",{parentName:"p"},"terrible"),".",(0,i.kt)("br",null),"\nWhy?  Well, the code for riding animals has been written twice independently.\nWhich is a big waste of time!"),(0,i.kt)("p",null,'It would be much better if John and Mary\'s mods both "extended" a common mod,\ne.g, the "Ridable Animals Mod".\nThis way, code is only written once in a generic fashion, and time is saved.'),(0,i.kt)("p",null,'But actually, there\'s a bigger problem than "duplicate code": ',(0,i.kt)("em",{parentName:"p"},"Compatibility."),(0,i.kt)("br",null),"\nImagine if someone loads the ridable elephants mod, and the ridable horses mod at the same time.",(0,i.kt)("br",null),"\nImagine the player jumps on a horse, and then goes over to an elephant,\nand tries to ride the elephant ",(0,i.kt)("em",{parentName:"p"},"whilst riding")," the horse."),(0,i.kt)("p",null,"At best, nothing happens.",(0,i.kt)("br",null),"\nAt worst, the game crashes, or they get glitched across the world in an unpredictable fashion."),(0,i.kt)("p",null,"Without John and Mary following a standard protocol, there is no way for them\nto know if they are breaking each others work."),(0,i.kt)("hr",null),(0,i.kt)("p",null,'Ideally, in UMG, the "ridable" behaviour would be extrapolated to a "Base" mod.\nThe "Playable" mods, (ridable horses and ridable elephants) could then extend the "ridable" mod.'),(0,i.kt)("h1",{id:"technical-implementation"},"Technical implementation:"),(0,i.kt)("p",null,"So this setup is cool and all, but how would this work in a technical sense?",(0,i.kt)("br",null),"\nHow do mods know about each other in this way?",(0,i.kt)("br",null),"\nAlso, what stops other base mods from being incompatible with each other, causing the same class of problems?"),(0,i.kt)("p",null,"To understand this, lets do a quick overview of UMG architecture:"),(0,i.kt)("h2",{id:"the-umg-entity-component-system"},"The UMG Entity Component System:"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"If you have never heard of ECSes in a gamedev context, I recommend looking it up real quick.")),(0,i.kt)("p",null,"In UMG, everything in the world is an entity.\nPlayers, bullets, enemies, trees, grass, are all entities.",(0,i.kt)("br",null),"\nEntities exist on both the server and the client; however only the server\nhas the authority to create and delete them."),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"Group")," is like an array that holds entities. (<-- Remember this, it's important.)",(0,i.kt)("br",null),"\nEntities are automatically added to groups if they have the required components for that group."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- Here\'s a group with components  .x, .y  .image  \n-- All entities with these components are added to myGroup automatically.\nlocal myGroup = umg.group("x", "y", "image")\n')),(0,i.kt)("p",null,'Our "Systems" then will iterate over ',(0,i.kt)("inlineCode",{parentName:"p"},"group"),"s of entities,\nexecuting code and changing the state of entities as they go."),(0,i.kt)("p",null,"So, back to the example from before. With the ridable horses and elephants.\nWith our setup, we could have both horses and elephants contain a ",(0,i.kt)("inlineCode",{parentName:"p"},"ridable"),"\ncomponent, and have a system act on all entities with ",(0,i.kt)("inlineCode",{parentName:"p"},"x, y, ridable")," components."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local ridableGroup = umg.group("ridable", "x", "y")\n\nlocal function update()\n    for ent in ridableGroup do\n        local riderEnt = ent.rider\n        if riderEnt ~= nil then\n            -- set the rider\'s position to the steed ent.\n            riderEnt.x = ent.x\n            riderEnt.y = ent.y\n            riderEnt.z = ent.z + ent.ridable.rideHeight\n        end\n    end\nend\n\n-- Code for mounting.  This can be called by other mods, and is\n-- called automatically when the player clicks on the steed.\nlocal function mount(steedEnt, riderEnt)\n    if not ridableGroup:has(steedEnt) then\n        error("this entity isn\'t ridable!")\n    end\n    steedEnt.rider = riderEnt\nend\n\n... -- more code here, etc\n')),(0,i.kt)("p",null,"I'd also like to point out that ",(0,i.kt)("inlineCode",{parentName:"p"},"riderEnt"),' does not neccessarily have to be a player.\nIn UMG, there\'s not really such thing as a "player"; a player is just a regular entity.',(0,i.kt)("br",null),"\nWith this generic setup, we can have any entity type doing the riding. Which allows cool stuff such as:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Enemies on horses"),(0,i.kt)("li",{parentName:"ul"},"Horses with chests on their back (chest entity is riding)"),(0,i.kt)("li",{parentName:"ul"},"Horses with lights on their back (torch entity is riding)"),(0,i.kt)("li",{parentName:"ul"},"Elephants with gun turrets on their back (turret entity is riding)")),(0,i.kt)("p",null,"But anyway, that's getting sidetracked.",(0,i.kt)("br",null),"\nThe main point of this is that now both the horse and the elephant can follow a\nstandard protocol for riding:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- Horse entity\nreturn {\n  image = "horse",\n  ridable = {\n    rideHeight = 10\n  },\n  speed = 45\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- Elephant entity\nreturn {\n  image = "elephant",\n  ridable = {\n    rideHeight = 28\n  },\n  speed = 10\n}\n')),(0,i.kt)("p",null,"Awesome!  Now, John and Mary's mods work together just fine. "),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Unfortunetely, Mary and John still have some problems that need to be addressed."),(0,i.kt)("p",null,'In John\'s horse riding mod, he wants to limit horse riding to the "knight" class.',(0,i.kt)("br",null),"\nIn Mary's elephant riding mod, she wants the elephants to flap their ears when the player mounts."),(0,i.kt)("p",null,"But... how can this be solved?",(0,i.kt)("br",null),"\nRemember, the ",(0,i.kt)("inlineCode",{parentName:"p"},"riding")," mod is a ",(0,i.kt)("em",{parentName:"p"},"base mod."),"\nWhich means it knows NOTHING about the current game context; all it cares about is the ",(0,i.kt)("inlineCode",{parentName:"p"},"ridable")," component."),(0,i.kt)("p",null,"So, the ",(0,i.kt)("inlineCode",{parentName:"p"},"riding")," mod knows NOTHING about elephant ears.",(0,i.kt)("br",null),'\nIt also knows NOTHING about "knights" either. The concept of "knights" may not even exist, depending on what mods are loaded!'),(0,i.kt)("h2",{id:"mod-communication-through-event-buses"},"Mod communication through event buses:"),(0,i.kt)("p",null,"To give Mary and John the tools to solve this problem, we can use ",(0,i.kt)("a",{parentName:"p",href:"../buses"},"event-buses and question-buses.")),(0,i.kt)("p",null,"Specifically, John and Mary need two things:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Mary needs an event to be emitted whenever a ridable entity is mounted"),(0,i.kt)("li",{parentName:"ul"},"John needs to signal to the ",(0,i.kt)("inlineCode",{parentName:"li"},"riding")," mod that horses can't be mounted unless the entity is of knight class")),(0,i.kt)("p",null,"So, lets update our ",(0,i.kt)("inlineCode",{parentName:"p"},"mount")," function from before:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'\nlocal function mount(steedEnt, riderEnt)\n    if not ridableGroup:has(steedEnt) then\n        error("this entity isn\'t ridable!")\n    end\n\n    -- John needs to answer this question\n    if umg.ask("ridingNotAllowed", OR, steedEnt, riderEnt) then\n        return -- not allowed!\n    end\n    \n    -- Mary needs this event\n    umg.call("entityMounted", steedEnt, riderEnt)\n    steedEnt.rider = riderEnt\nend\n\n')),(0,i.kt)("p",null,"Now, John and Mary can tag into these events, like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- John\'s code:\numg.answer("ridingNotAllowed", function(steedEnt, riderEnt)\n    if steedEnt.animalType == HORSE and riderEnt.class ~= KNIGHT then\n        return true\n    end\n    return false\nend)\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- Mary\'s code:\numg.on("entityMounted", function(steedEnt, riderEnt)\n    if steedEnt.animalType == ELEPHANT then\n        flapElephantEars(steedEnt)\n    end\nend)\n')),(0,i.kt)("p",null,"Voila! Now, Mary and John can both have what they want, and\n",(0,i.kt)("em",{parentName:"p"},"what's best"),", is that their code is still 100% compatible.",(0,i.kt)("br",null),"\nIsn't that beautiful?"),(0,i.kt)("p",null,"This idea where mods are forced to be hyper-generic and hyper-compatible is a central goal of the UMG ecosystem."),(0,i.kt)("p",null,"Other mods may also tag onto this stuff, and it will be 100% fine,\nsince the ",(0,i.kt)("inlineCode",{parentName:"p"},"ridable")," mod doesn't care (and doesn't even know) what mods are listening\nto the events and answering the questions."),(0,i.kt)("p",null,"For example, maybe we want to have two teams, RED and BLUE.",(0,i.kt)("br",null),"\nThis code makes it so only Blue team can use Blue horses, and same for Red:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- Team system\numg.answer("ridingNotAllowed", function(steedEnt, riderEnt)\n    if steedEnt.team and riderEnt.team and (steedEnt.team ~= riderEnt.team) then\n        -- not in same team! disallow riding.\n        return true\n    end\n    -- entities are either in same team, or don\'t have a team.\n    return false \nend)\n')),(0,i.kt)("p",null,"What's great, is that this code is 100% compatible with John and Mary's code from before.\nIt's just ",(0,i.kt)("em",{parentName:"p"},"beautiful"),"."),(0,i.kt)("h1",{id:"mod-communication-through-components"},"Mod communication through components:"),(0,i.kt)("p",null,"Events buses are not the only way mods can communicate.",(0,i.kt)("br",null),"\nOften, communication is done by simply changing component values from within entities."),(0,i.kt)("p",null,"Here's an example:"),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Lets say we want our mod to render entities:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- rendering system\nlocal drawGroup = umg.group("image", "x", "y")\n\nlocal function draw()\n    -- this draw function is called every frame\n    for ent in drawGroup do\n        graphics.draw(ent.image, ent.x, ent.y)\n    end\nend\n')),(0,i.kt)("p",null,"In this base mod, anything with an image, x, and y will be drawn to the screen."),(0,i.kt)("p",null,"To use this functionality, we can simply add the ",(0,i.kt)("inlineCode",{parentName:"p"},"x, y, image")," components to one of our entities:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local ent = newEntity()\n\nent.x = 10\nent.y = 15\nent.image = "banana"\n')),(0,i.kt)("p",null,'Now, this entity will be drawn to the screen automatically, at position (10, 15), with image "banana".'),(0,i.kt)("p",null,"Awesome!",(0,i.kt)("br",null),"\nOkay, but what if we want an animation?"),(0,i.kt)("p",null,"To handle animation, we can have another system that ",(0,i.kt)("em",{parentName:"p"},"changes")," the ",(0,i.kt)("inlineCode",{parentName:"p"},".image")," component\nwith respect to time.",(0,i.kt)("br",null),"\nFor example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- animation system\nlocal animationGroup = umg.group("animation")\n\nlocal function update()\n    -- this function is called every frame\n    local time = getTime()\n    for ent in animationGroup do\n        ent.image = getAnimationImage(ent.animation, time)\n    end\nend\n')),(0,i.kt)("p",null,"What's cool, is that this animation code and the rendering code from before\ncan be in entirely different systems, or even in ",(0,i.kt)("em",{parentName:"p"},"entirely different mods.")),(0,i.kt)("p",null,"Here, the ",(0,i.kt)("inlineCode",{parentName:"p"},"animation")," system is assuming that the rendering code will handle\nthe drawing of the entity, so all that it needs to care about is setting the image."),(0,i.kt)("p",null,"It's beautiful, right? :)"),(0,i.kt)("h1",{id:"to-conclude"},"To conclude:"),(0,i.kt)("p",null,"This document gives a brief overview of some design challenges (and solutions) that the UMG ecosystem has to deal with."),(0,i.kt)("p",null,"I hope that the whole Base-mod / Playable-mod setup is a lot clearer, and I hope the\nreasoning behind it makes sense now.",(0,i.kt)("br",null),"\nIt's certainly a challenging and interesting project, and I absolutely wish to see it through."),(0,i.kt)("p",null,"Thanks for reading."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Oli")))}m.isMDXComponent=!0},2695:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/cooperative_modding-fa329f06d8f98223a56991e3076b653e.png"},7697:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/regular_modding-0d391365f272fd23cff59af7cbb3c8e0.png"}}]);