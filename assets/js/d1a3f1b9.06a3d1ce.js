"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4872],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(t),h=o,d=m["".concat(s,".").concat(h)]||m[h]||u[h]||l;return t?a.createElement(d,r(r({ref:n},c),{},{components:t})):a.createElement(d,r({ref:n},c))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var l=t.length,r=new Array(l);r[0]=h;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[m]="string"==typeof e?e:o,r[1]=i;for(var p=2;p<l;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},7147:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var a=t(7462),o=(t(7294),t(3905));const l={slug:"umgidioms",title:"UMG Idioms",tags:["coding","umg"]},r="UMG Idioms",i={permalink:"/blog/umgidioms",source:"@site/blog/2023-09-30_umg_idioms.md",title:"UMG Idioms",description:"A list of idioms for the UMG ecosystem.",date:"2023-09-30T00:00:00.000Z",formattedDate:"September 30, 2023",tags:[{label:"coding",permalink:"/blog/tags/coding"},{label:"umg",permalink:"/blog/tags/umg"}],readingTime:5.71,hasTruncateMarker:!0,authors:[],frontMatter:{slug:"umgidioms",title:"UMG Idioms",tags:["coding","umg"]},prevItem:{title:"Results orientated gamedev, and why it's bad",permalink:"/blog/results_orientated_gamedev"},nextItem:{title:"How should we represent entity properties?",permalink:"/blog/properties"}},s={authorsImageUrls:[]},p=[],c={toc:p},m="wrapper";function u(e){let{components:n,...t}=e;return(0,o.kt)(m,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"A list of idioms for the UMG ecosystem."),(0,o.kt)("hr",null),(0,o.kt)("br",null),(0,o.kt)("h1",{id:"checking-if-an-entity-has-a-component"},"Checking if an entity has a component:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'if ent.foo then\n    print("entity has component foo!")\nend\n')),(0,o.kt)("p",null,"This is (roughly) the same as ",(0,o.kt)("inlineCode",{parentName:"p"},'ent:hasComponent("foo")'),".",(0,o.kt)("br",null),"\n(This works because lua tables give nil when a key is missing)"),(0,o.kt)("hr",null),(0,o.kt)("br",null),(0,o.kt)("h1",{id:"base-mod-files"},"Base-mod files:"),(0,o.kt)("p",null,"These files aren't compulsory, but it is common practice to put them in base mods:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"mod/components.md")," - defines the components for this mod, in markdown",(0,o.kt)("br",null),"\n",(0,o.kt)("inlineCode",{parentName:"p"},"mod/mod_questions.lua")," - where ",(0,o.kt)("inlineCode",{parentName:"p"},"umg.defineQuestion")," is used",(0,o.kt)("br",null),"\n",(0,o.kt)("inlineCode",{parentName:"p"},"mod/mod_events.lua")," - where ",(0,o.kt)("inlineCode",{parentName:"p"},"umg.defineEvent")," is used",(0,o.kt)("br",null)),(0,o.kt)("hr",null),(0,o.kt)("br",null),(0,o.kt)("h1",{id:"runtime-clientserver-checks"},"Runtime client/server checks:"),(0,o.kt)("p",null,"Often, we will have code that is running on BOTH client-side AND server-side.",(0,o.kt)("br",null),"\n(For example, the ",(0,o.kt)("inlineCode",{parentName:"p"},"onDeath")," callback)"),(0,o.kt)("p",null,"To get server/client specific behaviour, we can check what side we are on at runtime!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'local function onDeath(ent)\n    -- called on client AND server.\n    if server then\n        -- this branch is only ran on server.\n        print("I AM FROM SERVER")\n    elseif client then\n        -- only ran on client! :)\n        print("hi from client!")\n    end\nend\n')),(0,o.kt)("p",null,"You get the idea! :)"),(0,o.kt)("hr",null),(0,o.kt)("br",null),(0,o.kt)("h1",{id:"clientserver-only-shared-components"},"Client/server only shared components:"),(0,o.kt)("p",null,"Sometimes, we will have an object that can only be created on client/server. (For example, a text object)",(0,o.kt)("br",{parentName:"p"}),"\n","The issue is that text objects don't exist on the server.  and we may want this object as a shared component in an ent-type definition.",(0,o.kt)("br",{parentName:"p"}),"\n","How do we fix this?    "),(0,o.kt)("p",null,"We can avoid this with the following idiom:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'umg.defineEntityType("mod:myEnt", {\n    text = client and Text()\n    --[[\n    Due to short circuiting, Text() is only evaluated on the client here.\n    if we justpdid:\n\n    text = Text()\n\n    Then we would get an error, because Text is not available on the server.\n    ]]\n})\n')),(0,o.kt)("hr",null),(0,o.kt)("br",null),(0,o.kt)("h1",{id:"classes"},"Classes:"),(0,o.kt)("p",null,"Lua doesn't have classes, neither does the UMG engine.",(0,o.kt)("br",null),"\nHowever, the ",(0,o.kt)("inlineCode",{parentName:"p"},"objects")," base mod provides classes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'local MyClass = objects.Class("my_mod:MyClass")\n\nfunction MyClass:init(...)\n    -- init is a special function that is called on instantiation\n    print("init!", ...)\nend\n\nfunction MyClass:method()\n    print("method call: ", self)\nend\n\nlocal obj = MyClass(1,2,3)\n-- prints:  init! 1 2 3\n')),(0,o.kt)("p",null,"The reason this is better than ",(0,o.kt)("inlineCode",{parentName:"p"},"setmetatable"),", is because ",(0,o.kt)("inlineCode",{parentName:"p"},"objects.Class"),"\nwill automatically register ",(0,o.kt)("inlineCode",{parentName:"p"},"MyClass")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"umg.register"),"."),(0,o.kt)("p",null,"(WARNING: When defining a class, make sure to define on BOTH client AND server!!!\nElse, you'll run into big bad issues.)"),(0,o.kt)("hr",null),(0,o.kt)("br",null),(0,o.kt)("h1",{id:"component-wise-bus-response"},"Component-wise bus response:"),(0,o.kt)("p",null,"Listen to an event/question, and only respond if the entity has a certain component:",(0,o.kt)("br",null),"\nThis setup is VERY common (and important) in UMG."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If an entity has the ",(0,o.kt)("inlineCode",{parentName:"li"},".halo")," component:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"--\x3e draw a circle above it.")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'umg.on("rendering:drawEntity", function(ent)\n    if ent.halo then\n        -- draw a halo above the entity!\n        love.graphics.circle("line", ent.x, ent.y - 10, 5)\n    end\nend)\n')),(0,o.kt)("p",null,"Comp-wise bus response also works with question buses too:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If an entity is covered in goo:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"--\x3e slow the entity")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'umg.answer("xy:getSpeedMultiplier", function(ent)\n    if ent.goo then\n        return 0.5\n    end\n    return 1\nend)\n')),(0,o.kt)("hr",null),(0,o.kt)("br",null),(0,o.kt)("h1",{id:"entity-inheritance"},"Entity inheritance:"),(0,o.kt)("p",null,'Sometimes, we may want to define an entity "base class", and extend it for a bunch of similar entity-types.'),(0,o.kt)("p",null,"We can do this by defining a function that mutates an entity definition:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'-- shared/abstract_entities.lua\n\n-- make sure its global!\nfunction enemyType(etype)\n    etype.category = "enemy",\n    etype.attack = etype.attack or {\n        type = "melee",\n        range = MELEE_RANGE\n    };\nend\n')),(0,o.kt)("p",null,"And then, when we define our entities, we can access our global function ",(0,o.kt)("inlineCode",{parentName:"p"},"enemyType"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'-- entities/my_enemy.lua\n\nreturn enemyType({\n    image = "enemy1",\n    baseMaxHealth = 100,\n    baseStrength = 30\n})\n')),(0,o.kt)("p",null,"You get the idea :)"),(0,o.kt)("hr",null),(0,o.kt)("br",null),(0,o.kt)("h1",{id:"functions-in-components"},"Functions in components:"),(0,o.kt)("p",null,"You may be horrified to realize that in UMG, doing this on serverside will cause a runtime error:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"ent.myComponent = function() end\n")),(0,o.kt)("p",null,"This is because in UMG, newly defined components are automatically sent over the network.",(0,o.kt)("br",null),"\nAnd in UMG, functions can't be serialized; so an error is thrown."),(0,o.kt)("p",null,"But we ",(0,o.kt)("em",{parentName:"p"},"can")," have functions as shared components, by defining them inside the entity type.",(0,o.kt)("br",null),"\nThis is because shared-components aren't sent over the network."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"-- my_mod/entities/my_entity.lua\nreturn {\n    myComponent = function() end\n    -- this is ok! :)\n\n    ...\n}\n")),(0,o.kt)("hr",null),(0,o.kt)("br",null),(0,o.kt)("h1",{id:"typecheck-naming-convention"},"Typecheck naming convention:"),(0,o.kt)("p",null,"When using ",(0,o.kt)("inlineCode",{parentName:"p"},"typecheck")," mod, it's common to end the typecheck function with ",(0,o.kt)("inlineCode",{parentName:"p"},"Tc"),".",(0,o.kt)("br",null),"\nFor example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'local addTc = typecheck.assert("number", "number")\n')),(0,o.kt)("p",null,"(The ",(0,o.kt)("inlineCode",{parentName:"p"},"Tc"),' stands for "type check")'),(0,o.kt)("hr",null),(0,o.kt)("br",null),(0,o.kt)("h1",{id:"method-event-pattern-in-base-mods"},"Method-Event pattern in base mods:"),(0,o.kt)("p",null,"When an event happens concerning an entity, it's common to do something like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'-- ent dies!\nlocal function die(ent)\n    if ent.onDeath then\n        ent:onDeath()\n    end\n    umg.call("mod:onDeath", ent)\nend\n')),(0,o.kt)("p",null,"This is quite flexible, since it allows for other systems to tag onto the death event, but it also allows entity-specific behaviour through our ",(0,o.kt)("inlineCode",{parentName:"p"},"onDeath")," shared component."),(0,o.kt)("p",null,"Examples of this: ",(0,o.kt)("inlineCode",{parentName:"p"},"mortality:entityDeath"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"rendering:drawEntity")),(0,o.kt)("hr",null),(0,o.kt)("br",null),(0,o.kt)("h1",{id:"component-projection----flag-components"},"Component-projection  +  Flag components:"),(0,o.kt)("p",null,'In UMG, "component projection" is a concept when one component causes\nanother component to exist, or "creates" another component.'),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"components")," base mod provides a bunch of tools for this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'components.project("X", "Y")\n-- Component X "projects" onto component Y.\n\n-- (Any entities that with component `X` are given component `Y`)\n')),(0,o.kt)("p",null,'This is most common for "flag" components; ie. components that don\'t do anything on their own, but cause the entity to be accepted by certain systems.',(0,o.kt)("br",null),"\nExample:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'\ncomponents.project("clickToBuy", "clickable")\n-- any entity with `clickToBuy` will be given the `clickable` component\n\numg.on("control:entityClicked", function(ent)\n    --[[\n    The only reason this event is emitted, is because ent has the\n    `clickable` component, and is being handled by the `clickable` system!\n\n    We don\'t need to worry about how the clickable system works;\n    we just need to listen to this callback.\n    ]]\n    if ent.clickToBuy then\n        shop.tryBuy(ent)\n    end\nend)\n')),(0,o.kt)("p",null,"The same thing is used for ",(0,o.kt)("inlineCode",{parentName:"p"},"drawable")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"usable"),"."),(0,o.kt)("hr",null),(0,o.kt)("br",null),(0,o.kt)("h1",{id:"component-referencing"},"Component referencing:"),(0,o.kt)("p",null,"Sometimes, we want a component to have behaviour that depends on other (arbitrary) components."),(0,o.kt)("p",null,"For example, Health-Bars should depend on both ",(0,o.kt)("inlineCode",{parentName:"p"},"maxHealth")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"health")," components."),(0,o.kt)("p",null,"Using component-referencing, we could implement Health-Bars using a more generic component: Progress-Bars!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'-- We create a healthBar,\n-- USING the progressBar component:\nent.progressBar = {\n    value = "health", -- value of the progressBar\n    maxValue = "maxHealth", -- max-value of the progressBar\n\n    color = RED\n}\n')),(0,o.kt)("p",null,"Here, the system that manages the ",(0,o.kt)("inlineCode",{parentName:"p"},"progressBar")," component will notice that we want the ",(0,o.kt)("em",{parentName:"p"},"value")," of the progressBar to be determined by ",(0,o.kt)("inlineCode",{parentName:"p"},"ent.maxHealth")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"ent.health"),"."),(0,o.kt)("p",null,"This is ",(0,o.kt)("em",{parentName:"p"},"really")," beautiful, since we can reuse progressBars to represent other stuff.",(0,o.kt)("br",null),"\nFor example, a timer:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'-- A timer! :)\nent.progressBar = {\n    value = "timeRemaining",\n    maxValue = "totalTime"\n}\n-- Using `ent.totalTime` and `ent.timeRemaining` components.\n')),(0,o.kt)("p",null,"We could then combine this with component projection to make a proper ",(0,o.kt)("inlineCode",{parentName:"p"},"healthBar")," component:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'components.project("healthBar", "progressBar", function(ent)\n    --[[\n        healthBar component projects ONTO progressBar component\n        (healthBar --\x3e progressBar)\n    ]]\n    local hBar = ent.healthBar\n\n    local progressBar = {\n        value = "health",\n        maxValue = "maxHealth",\n        color = RED,\n        width = hBar.width,\n        height = hBar.height\n    }\n    return progressBar\nend)\n')),(0,o.kt)("p",null,"Awesome, right??? :D"),(0,o.kt)("hr",null),(0,o.kt)("br",null))}u.isMDXComponent=!0}}]);