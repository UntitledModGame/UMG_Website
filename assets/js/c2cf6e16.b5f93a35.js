"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5661],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(t),d=a,f=c["".concat(s,".").concat(d)]||c[d]||m[d]||l;return t?r.createElement(f,o(o({ref:n},p),{},{components:t})):r.createElement(f,o({ref:n},p))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[c]="string"==typeof e?e:a,o[1]=i;for(var u=2;u<l;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1221:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var r=t(7462),a=(t(7294),t(3905));const l={slug:"umg_style_guide",title:"UMG Style Guide",tags:["umg"]},o=void 0,i={permalink:"/blog/umg_style_guide",source:"@site/blog/2024-08-26_UMG_STYLE_GUIDE.md",title:"UMG Style Guide",description:"UMG Style guide.",date:"2024-08-26T00:00:00.000Z",formattedDate:"August 26, 2024",tags:[{label:"umg",permalink:"/blog/tags/umg"}],readingTime:2.94,hasTruncateMarker:!0,authors:[],frontMatter:{slug:"umg_style_guide",title:"UMG Style Guide",tags:["umg"]},prevItem:{title:"Premature event listeners",permalink:"/blog/premature_systems"},nextItem:{title:"The Zen of UMG",permalink:"/blog/zen_of_umg"}},s={authorsImageUrls:[]},u=[],p={toc:u},c="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"UMG Style guide."),(0,a.kt)("h1",{id:"the-golden-rule"},"THE GOLDEN RULE:"),(0,a.kt)("p",null,"Try write code that is ",(0,a.kt)("em",{parentName:"p"},"as readable as possible"),"."),(0,a.kt)("br",null),(0,a.kt)("br",null),(0,a.kt)("br",null),(0,a.kt)("h1",{id:"comments"},"Comments"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Keep comments TERSE, not VERBOSE."),(0,a.kt)("li",{parentName:"ul"},"Conciseness > Proper grammar"),(0,a.kt)("li",{parentName:"ul"},"Dont leave comments for simple code. "),(0,a.kt)("li",{parentName:"ul"},"Use ",(0,a.kt)("inlineCode",{parentName:"li"},"TODO"),"s / ",(0,a.kt)("inlineCode",{parentName:"li"},"FIXME"),"s when appropriate")),(0,a.kt)("p",null,"EXAMPLE FOR COMMENTS:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"\nfunction doStuff(entArray)\n    ...\n    --[[\n    The reason we don't simply loop over the entire array of entities,\n    and delete each one is because they are used by the item-system \n    for when the item-drops are polled after receiving `clean` event.\n    ]]\n    scheduling.delay(0, function()\n        for _, ent in ipairs()\n            ent:delete()\n        end\n    end)\nend\n\n-- ^^^^ BAD BAD BAD! Explanation is too verbose!\n\n\nlocal function doStuff(entArray)\n    ...\n    -- Cannot delete immediately, \n    -- item_system.lua needs them for `clean` event.\n    scheduling.delay(0, function()\n        for _, ent in ipairs()\n            ent:delete()\n        end\n    end)\nend\n\n--- ^^^^ MUCH BETTER.\n")),(0,a.kt)("p",null,"In general, be very aggressive when shortening comments.",(0,a.kt)("br",{parentName:"p"}),"\n","EG:  "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"BAD: ",(0,a.kt)("inlineCode",{parentName:"li"},'"Looping over the itemPool array is inefficient"')),(0,a.kt)("li",{parentName:"ul"},"Much better: ",(0,a.kt)("inlineCode",{parentName:"li"},'"looping over itemPool is slow"'))),(0,a.kt)("hr",null),(0,a.kt)("br",null),(0,a.kt)("br",null),(0,a.kt)("br",null),(0,a.kt)("h1",{id:"readable-variables"},"Readable Variables:"),(0,a.kt)("p",null,"To compensate for less comments, we want code to read like english would.",(0,a.kt)("br",{parentName:"p"}),"\n","Ideally you should be able to read code similar to how you would read english."),(0,a.kt)("p",null,"(Try to prefix boolean variables with ",(0,a.kt)("inlineCode",{parentName:"p"},"can")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"is")," when appropriate.)",(0,a.kt)("br",{parentName:"p"}),"\n","EXAMPLE:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'\nfunction doStuff2(ent)\n    if (not umg.ask("items:isInventoryLocked", ent)) then\n        -- ^^^ BAD! unreadable!!\n        ...\n    end\nend\n\n\nfunction doStuff2(ent)\n    local canOpen = (not umg.ask("items:isInventoryLocked", ent))\n    if canOpen then\n        -- ^^^ MUCH BETTER :)))\n        -- (reads well: "if canOpen then")\n        ...\n    end\nend\n\n\n-- OR, EVEN BETTER:\nfunction doStuff3(ent)\n    if canOpen(ent) then\n        -- ^^^ WOW, SO READABLE :D much wow\n        ...\n    end\nend\n')),(0,a.kt)("p",null,"In general, localize when appropriate:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"-- BAD!!!!\nfunction foo()\n    print(my_table.position.x)\n    print(my_table.position.y)\n    print(my_table.position.z)\nend\n\n-- better:\nfunction foo()\n    local pos = my_table.position\n    print(pos.x)\n    print(pos.y)\n    print(pos.z)\nend\n")),(0,a.kt)("hr",null),(0,a.kt)("br",null),(0,a.kt)("br",null),(0,a.kt)("br",null),(0,a.kt)("h1",{id:"indentation"},"Indentation"),(0,a.kt)("p",null,"Use 4 spaces please."),(0,a.kt)("hr",null),(0,a.kt)("br",null),(0,a.kt)("br",null),(0,a.kt)("br",null),(0,a.kt)("h1",{id:"line-spacing"},"Line spacing"),(0,a.kt)("p",null,"In UMG, we use line-spacing to group together related bits of code, to make it more readable.  "),(0,a.kt)("p",null,"For functions/code that do similar stuff, group them tightly together.",(0,a.kt)("br",{parentName:"p"}),"\n","Else, split them apart using newlines."),(0,a.kt)("p",null,"EXAMPLE:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"\nlocal util = {}\n\n\n\nfunction util.tryCall(f, ...)\n    ...\nend\n\n\n-- notice the newlines here\n\n\nfunction util.log(msg)\n    ...\nend\n\n\n-- and here\n\n\nlocal function newCompresser(str)\n    return ...\nend\n-- but only one newline here!\nfunction util.compressString(str)\n    local b = newCompresser(str)\n    ...\nend\n-- and only one here!\nfunction util.decompressString(str)\n    ...\nend\n")),(0,a.kt)("p",null,"this helps us reason about the code better,\nbecause it is broken up implicitly into regions."),(0,a.kt)("p",null,"(In general, code is never really something that you read top-to-bottom like a book; but rather, more similar to a bunch of nodes connected in a big graph.)"),(0,a.kt)("p",null,"Ideally, try to use 3 or 4 newlines between unrelated functions, and 1 newline between related functions."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"WITHIN")," a function, there should be a maximum of ONE newline between statements.",(0,a.kt)("br",{parentName:"p"}),"\n","(It should follow the same rule as above; create space if the statements are unrelated)"),(0,a.kt)("hr",null),(0,a.kt)("br",null),(0,a.kt)("br",null),(0,a.kt)("br",null),(0,a.kt)("h1",{id:"table-arguments"},"Table arguments:"),(0,a.kt)("p",null,"If you have many arguments, consider combining them into a table:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"\n-- BAD!!! it's hard to tell what's happening\ndispatchCommand(cmd, b.foo, r, r2)\n\n-- GOOD. This is readable:\ndispatchCommand({\n    type = cmd,\n    argumentTable = b.foo,\n    viewArea = r,\n    spawnArea = r2\n})\n\n-- THIS IS GOOD TOO:\ndispatchCommand(cmd, {\n    argumentTable = b.foo,\n    viewArea = r,\n    spawnArea = r2\n})\n")),(0,a.kt)("p",null,"IMPORTANT DISCLAIMER:",(0,a.kt)("br",{parentName:"p"}),"\n","Using a table is very inefficient compared to arguments, since it incurs an allocation.",(0,a.kt)("br",{parentName:"p"}),"\n","Only use a table if it won't impact performance much."))}m.isMDXComponent=!0}}]);