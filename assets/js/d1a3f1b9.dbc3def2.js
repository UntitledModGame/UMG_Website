"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4872],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),u=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=u(e.components);return i.createElement(s.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=u(t),d=a,h=m["".concat(s,".").concat(d)]||m[d]||c[d]||o;return t?i.createElement(h,r(r({ref:n},p),{},{components:t})):i.createElement(h,r({ref:n},p))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[m]="string"==typeof e?e:a,r[1]=l;for(var u=2;u<o;u++)r[u]=t[u];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7147:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var i=t(7462),a=(t(7294),t(3905));const o={slug:"umgidioms",title:"UMG Idioms",tags:["coding","umg"]},r="UMG Idioms",l={permalink:"/blog/umgidioms",source:"@site/blog/2023-09-30_umg_idioms.md",title:"UMG Idioms",description:"A list of idioms that are common in the UMG ecosystem.",date:"2023-09-30T00:00:00.000Z",formattedDate:"September 30, 2023",tags:[{label:"coding",permalink:"/blog/tags/coding"},{label:"umg",permalink:"/blog/tags/umg"}],readingTime:2.735,hasTruncateMarker:!0,authors:[],frontMatter:{slug:"umgidioms",title:"UMG Idioms",tags:["coding","umg"]},nextItem:{title:"How should we represent entity properties?",permalink:"/blog/properties"}},s={authorsImageUrls:[]},u=[],p={toc:u},m="wrapper";function c(e){let{components:n,...t}=e;return(0,a.kt)(m,(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"A list of idioms that are common in the UMG ecosystem."),(0,a.kt)("hr",null),(0,a.kt)("h1",{id:"base-mod-files"},"Base-mod files:"),(0,a.kt)("p",null,"These files aren't compulsory, but it is common practice to put them in base mods:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"mod/components.md")," - defines the components for this mod, in markdown",(0,a.kt)("br",null),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"mod/mod_questions.lua")," - where ",(0,a.kt)("inlineCode",{parentName:"p"},"umg.defineQuestion")," is used",(0,a.kt)("br",null),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"mod/mod_events.lua")," - where ",(0,a.kt)("inlineCode",{parentName:"p"},"umg.defineEvent")," is used",(0,a.kt)("br",null)),(0,a.kt)("hr",null),(0,a.kt)("h1",{id:"runtime-clientserver-checks"},"Runtime client/server checks:"),(0,a.kt)("p",null,"Often, we will have code that is running on BOTH client-side AND server-side.",(0,a.kt)("br",null),"\n(For example, the ",(0,a.kt)("inlineCode",{parentName:"p"},"onDeath")," callback)"),(0,a.kt)("p",null,"To get server/client specific behaviour, we can check what side we are on at runtime!"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local function onDeath(ent)\n    -- onDeath is a function thats called on client AND server.\n    if server then\n        -- this branch is only ran on server\n        print("I AM FROM SERVER")\n    elseif client then\n        -- only ran on client! :)\n        print("hi from client!")\n    end\nend\n')),(0,a.kt)("p",null,"You get the idea! :)"),(0,a.kt)("hr",null),(0,a.kt)("h1",{id:"classes"},"Classes:"),(0,a.kt)("p",null,"Lua doesn't have classes, neither does the UMG engine.",(0,a.kt)("br",null),"\nHowever, the ",(0,a.kt)("inlineCode",{parentName:"p"},"objects")," base mod provides classes:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local MyClass = objects.Class("my_mod:MyClass")\n\nfunction MyClass:init(...)\n    -- init is a special function that is called on instantiation\n    print("init!", ...)\nend\n\nfunction MyClass:method()\n    print("method call: ", self)\nend\n\nlocal obj = MyClass(1,2,3)\n-- prints:  init! 1 2 3\n')),(0,a.kt)("p",null,"The reason this is better than ",(0,a.kt)("inlineCode",{parentName:"p"},"setmetatable"),", is because ",(0,a.kt)("inlineCode",{parentName:"p"},"objects.Class"),"\nwill automatically register ",(0,a.kt)("inlineCode",{parentName:"p"},"MyClass")," with ",(0,a.kt)("inlineCode",{parentName:"p"},"umg.register"),"."),(0,a.kt)("p",null,"(WARNING: When defining a class, make sure to define on BOTH client AND server!!!\nElse, you'll run into big bad issues.)"),(0,a.kt)("hr",null),(0,a.kt)("h1",{id:"functions-in-components"},"Functions in components:"),(0,a.kt)("p",null,"You may be horrified to realize that in UMG, doing this on serverside will cause a runtime error:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"ent.myComponent = function() end\n")),(0,a.kt)("p",null,"This is because in UMG, newly defined components are automatically sent over the network.",(0,a.kt)("br",null),"\nAnd in UMG, functions can't be serialized; so an error is thrown."),(0,a.kt)("p",null,"But we ",(0,a.kt)("em",{parentName:"p"},"can")," have functions as shared components, by defining them inside the entity type.",(0,a.kt)("br",null),"\nThis is because shared-components aren't sent over the network."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"-- my_mod/entities/my_entity.lua\nreturn {\n    myComponent = function() end\n    -- this is ok! :)\n\n    ...\n}\n")),(0,a.kt)("hr",null),(0,a.kt)("h1",{id:"component-wise-bus-response"},"Component-wise bus response:"),(0,a.kt)("p",null,"Component-wise bus response is when we add a response to an event/question bus, and only respond to it if the entity has a certain component.",(0,a.kt)("br",null),"\nThis setup is VERY common (and important) in UMG."),(0,a.kt)("hr",null),(0,a.kt)("p",null,"For example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If an entity has the ",(0,a.kt)("inlineCode",{parentName:"li"},".halo")," component:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"--\x3e draw a circle above it.")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'umg.on("rendering:drawEntity", function(ent)\n    if ent.halo then\n        -- draw a halo above the entity!\n        love.graphics.circle("line", ent.x, ent.y - 10, 5)\n    end\nend)\n')),(0,a.kt)("p",null,"Another example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'umg.on("mortality:entityDeath", function(ent)\n    if ent.fire then\n        local explosionSize = 5\n        makeExplosion(ent, explosionSize)\n    end\nend)\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If an entity is on fire when it dies:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"--\x3e make an explosion")))),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Comp-wise bus response also works with question buses too:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If an entity is covered in goo:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"--\x3e slow the entity")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'umg.answer("xy:getSpeedMultiplier", function(ent)\n    if ent.goo then\n        return 0.5\n    end\n    return 1\nend)\n')),(0,a.kt)("hr",null),(0,a.kt)("h1",{id:"method-event-in-base-mods"},"Method-Event in base mods:"),(0,a.kt)("p",null,"When an event happens concerning an entity, it's common to do something like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'-- ent dies!\nlocal function die(ent)\n    if ent.onDeath then\n        ent:onDeath()\n    end\n    umg.call("mod:onDeath", ent)\nend\n')),(0,a.kt)("p",null,"This is quite flexible, since it allows for other systems to tag onto the death event, but it also allows entity-specific behaviour through our ",(0,a.kt)("inlineCode",{parentName:"p"},"onDeath")," shared component."),(0,a.kt)("p",null,"Examples of this: ",(0,a.kt)("inlineCode",{parentName:"p"},"mortality:entityDeath"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"rendering:drawEntity")))}c.isMDXComponent=!0}}]);