"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[141],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>v});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=c(t),p=r,v=u["".concat(l,".").concat(p)]||u[p]||m[p]||s;return t?a.createElement(v,o(o({ref:n},d),{},{components:t})):a.createElement(v,o({ref:n},d))}));function v(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,o=new Array(s);o[0]=p;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[u]="string"==typeof e?e:r,o[1]=i;for(var c=2;c<s;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5076:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var a=t(7462),r=(t(7294),t(3905));const s={sidebar_position:5},o="API Cheatsheet",i={unversionedId:"Getting-started/cheatsheet",id:"Getting-started/cheatsheet",title:"API Cheatsheet",description:"Brief API overview for UMG.",source:"@site/docs/Getting-started/cheatsheet.md",sourceDirName:"Getting-started",slug:"/Getting-started/cheatsheet",permalink:"/docs/Getting-started/cheatsheet",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/docs/Getting-started/overview"},next:{title:"Buses",permalink:"/docs/Getting-started/buses"}},l={},c=[],d={toc:c},u="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"api-cheatsheet"},"API Cheatsheet"),(0,r.kt)("p",null,"Brief API overview for UMG.",(0,r.kt)("br",null)),(0,r.kt)("p",null,"see ",(0,r.kt)("a",{parentName:"p",href:"https://love2d.org"},"love2d")," for their API reference."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'\nlove -- love2d modules:\n    love.graphics\n    love.keyboard\n    love.mouse\n    love.audio\n    love.physics\n    love.timer\n    love.data\n\n\n\nserver.entities\n-- entities are accessed and spawned by this table!\n-- (only available serverside.)\nlocal ent = server.entities.my_entity()\nent:addComponent("compName", 10) -- adds component\nent:removeComponent("compName")\n\nent:hasComponent("compName") -- false\nent:isShared("foo") -- checks if `foo` is a shared component\nent:isRegular("bar") -- checks if `bar` is a regular component\n\n\numg.exists(ent)\n-- returns `true` if `ent` is an active entity, false otherwise\n\n\n-- use `umg.group` to create a group:\nlocal mygroup = umg.group("comp1", "comp2", ...)  -- gets an entity group.\n\n-- group methods:\nmygroup:onAdded(function(ent) print("ent has been spawned!") end)\nmygroup:onRemoved(function(ent) print("ent deleted :(") end)\nmygroup:has(ent) -- true/false, whether the group contains `ent`\n\n\n\numg.extend("parent_ent", ent_def) \n-- deepcopies all data from entity `parent_ent` into table `ent_def`.\n-- useful for doing OOP-like inheritance in entity definitions.\n\n\n-- event buses:\numg.defineEvent("modname:my_event")\n-- events must be defined before they can be used.\numg.on("modname:my_event", func) -- listens to a local event\numg.call("modname:my_event", ...) -- broadcasts a local event\n\n\n-- question buses:\numg.defineQuestion("modname:my_question", math.max)\n-- questions must be defined before they can be used.\numg.answer("modname:my_question", reducer)\numg.ask("modname:my_question", ...)\n\n\n\numg.register(name, alias) -- registers a resource for serialization\n\nlocal data = umg.serialize(obj) -- NOTE: If obj involves an entity, the entity id is set to nil.\nlocal obj, err = umg.deserialize(data) -- deserializes data.\n\n\numg.expose("var", value) -- exports `var` to the global mod namespace.\n-- Now, all other mods can access `value` through the `var` global.\n\n\nclient  -- Client-side api\n    client.send(event_name, ...) -- sends a message to server\n    client.on(event_name, func) -- listens to a message from server\n    client.lazySend(event_name, ...) --lazy send: arrival not guaranteed\n\n    client.atlas -- access to global texture atlas\n    -- Images are automatically put in the texture atlas,\n    -- and are auto-batched.\n    client.atlas:draw(quad, x,y, r, sx,sy, ox,oy) -- draws quad.\n    \n    client.getUsername() -- gets client username\n\n    client.getMasterVolume() -- volume:\n    client.getSFXVolume()\n    client.getMusicVolume()\n\n    client.assets  -- ( holds image and sound assets )\n        client.assets.images  -- ( where quads are loaded )\n            assets.images["modname:asset_name"] = love2d_quad, -- OR:\n            assets.images["asset_name"] = love2d_quad\n        client.assets.sounds  -- ( where sounds are loaded )\n            assets.sounds["modname:sound_name"] = love2d_source,  -- OR:\n            assets.sounds["sound_name"] = love2d_source\n\n\nserver -- Server-side api\n    server.broadcast(event_name, ...) -- broadcasts an event to clients\n    server.unicast(username, event_name, ...) -- unicasts to one client\n    server.lazyBroadcast(event_name, ...) -- lazy broadcast: efficient, arrival not guaranteed\n    server.lazyUnicast(username, event_name, ...) -- lazy unicast: efficient, arrival not guaranteed \n\n    server.save(name, data) -- saves data to string `name`, (relative to world)\n    server.load(name) -- loads data from string `name` (relative to world)\n\n\nmath \n    -- extra math functions:\n    math.vec2(x,y) -- vector2 class\n    math.vec3(x,y) -- vector3 class\n    math.clamp(x, lower, upper)\n    math.round(x)\n    math.lerp(...)\n    math.distance(x, y, [z]) -- z is optional argument. Gets euclidean distance\n\n\n')),(0,r.kt)("p",null,"Most lua functions can be used as well, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"setmetatable"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"rawget"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"pairs"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"require"),", etc etc.",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"os"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"io"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ffi")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"debug")," modules have been disabled."))}m.isMDXComponent=!0}}]);