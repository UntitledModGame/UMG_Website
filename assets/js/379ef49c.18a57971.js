"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6731],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=r.createContext({}),u=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(o.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(t),m=a,h=c["".concat(o,".").concat(m)]||c[m]||d[m]||l;return t?r.createElement(h,i(i({ref:n},p),{},{components:t})):r.createElement(h,i({ref:n},p))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,i=new Array(l);i[0]=m;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var u=2;u<l;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1654:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var r=t(7462),a=(t(7294),t(3905));const l={},i="Buses",s={unversionedId:"Getting-started/buses",id:"Getting-started/buses",title:"Buses",description:"Event buses and Question buses are the heart of UMG.",source:"@site/docs/Getting-started/buses.md",sourceDirName:"Getting-started",slug:"/Getting-started/buses",permalink:"/docs/Getting-started/buses",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"API Cheatsheet",permalink:"/docs/Getting-started/cheatsheet"},next:{title:"Entities",permalink:"/docs/Getting-started/entities"}},o={},u=[],p={toc:u},c="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"buses"},"Buses"),(0,a.kt)("p",null,"Event buses and Question buses are the ",(0,a.kt)("em",{parentName:"p"},"heart")," of UMG.",(0,a.kt)("br",null),"\nWithout them, UMG would be worthless."),(0,a.kt)("p",null,"Event buses: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Dispatch events with ",(0,a.kt)("inlineCode",{parentName:"li"},"call")),(0,a.kt)("li",{parentName:"ul"},"When we dispatch information, we don't care who responds"),(0,a.kt)("li",{parentName:"ul"},"Respond to events with ",(0,a.kt)("inlineCode",{parentName:"li"},"on")),(0,a.kt)("li",{parentName:"ul"},"(Similar to pub-sub design pattern)")),(0,a.kt)("p",null,"Question buses: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Request information with ",(0,a.kt)("inlineCode",{parentName:"li"},"ask")),(0,a.kt)("li",{parentName:"ul"},"When we gather information, we don't care who gives it"),(0,a.kt)("li",{parentName:"ul"},"Provide information with ",(0,a.kt)("inlineCode",{parentName:"li"},"answer")),(0,a.kt)("li",{parentName:"ul"},"(Similar to pub-sub design pattern, but in reverse)")),(0,a.kt)("p",null,"Remember that in UMG, we have clientside AND serverside.",(0,a.kt)("br",null),"\nBuses are not synced across the network.\nBoth client and server have their own buses."),(0,a.kt)("hr",null),(0,a.kt)("h1",{id:"example-usage"},"Example usage:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'\n-- `rendering:drawEntity` is an event being emitted by the `rendering` mod.\numg.on("rendering:drawEntity", function(ent)\n    -- draw a circle around all drawn entities:\n    love.graphics.circle("line", ent.x, ent.y, 50)\nend)\n')),(0,a.kt)("p",null,"Example of question bus usage:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'\numg.answer("xy:getSpeedMultiplier", function(ent)\n    if ent.health and ent.health < 50 then\n        -- entities below 50 health move twice as fast!\n        return 2\n    end\nend)\n\n')),(0,a.kt)("hr",null),(0,a.kt)("h1",{id:"creating-our-own-events"},"Creating our own events:"),(0,a.kt)("p",null,"We can also create our own events:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'umg.defineEvent("my_mod:hello")\n\numg.on("my_mod:hello", function(a,b,c)\n    -- creates a function that listens to `hello` events\n    print("Hello one: ", a,b,c)\nend)\n\n\numg.on("my_mod:hello", function(a,b,c)\n    -- creates another function that listens to `hello` events\n    print("Hello two: ", a,b,c)\nend)\n\n\n-- emits a `hello` event:\numg.call("my_mod:hello", 1, "ent", {})\n--[[ \nOUTPUT:\n\nHello one: 1 "ent" {}\nHello two: 1 "ent" {}\n]]\n')),(0,a.kt)("hr",null),(0,a.kt)("h1",{id:"engine-events"},"Engine events"),(0,a.kt)("p",null,"There are a lot of events emitted by the engine.\nThese events are prexied with ",(0,a.kt)("inlineCode",{parentName:"p"},"@"),", which means they are special."),(0,a.kt)("p",null,"For example, ",(0,a.kt)("inlineCode",{parentName:"p"},"@update"),":",(0,a.kt)("br",null),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"@update")," is an event called every frame. It's like the game loop."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"@update (dt)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'-- Example usage:\numg.on("@update", function(dt)\n    local p = getPlayer()\n    updatePlayer(p, dt)\nend)\n\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"@update ( dt )   -- called every frame (like love.update)\n\n@tick () -- Represents one tick.\n-- Ticks are special, because they are synced between server/client.\n\n@load ()-- called when the mods and entities are done loading\n\n\n@playerJoin (username) -- called when `username` joins the server\n@playerLeave (username) -- called when `username` leaves the server\n\n\n-- Client-side only:\n@draw () -- when stuff should get drawn (like love.draw)\n@keypressed ( key, scancode, isrepeat ) -- same as love.keypressed\n@mousepressed (x, y, button, istouch, presses) -- same as love.mousepressed\n\n\n")),(0,a.kt)("hr",null),(0,a.kt)("h1",{id:"non-engine-events"},"Non-engine events:"),(0,a.kt)("p",null,"Here some other example callbacks that are defined by mods:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'"rendering:drawEntity" ( ent ) -- an entity is getting drawn\n"mortality:entityDeath" ( ent ) -- an entity dies\n')))}d.isMDXComponent=!0}}]);