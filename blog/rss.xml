<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Untitled Mod Game Blog</title>
        <link>https://your-docusaurus-test-site.com/blog</link>
        <description>Untitled Mod Game Blog</description>
        <lastBuildDate>Sat, 30 Sep 2023 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[UMG Idioms]]></title>
            <link>https://your-docusaurus-test-site.com/blog/umgidioms</link>
            <guid>https://your-docusaurus-test-site.com/blog/umgidioms</guid>
            <pubDate>Sat, 30 Sep 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[A list of idioms for the UMG ecosystem.]]></description>
            <content:encoded><![CDATA[<p>A list of idioms for the UMG ecosystem.</p><hr><h1>Checking if an entity has a component:</h1><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">foo </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">then</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"entity has component foo!"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This is the same as <code>ent:hasComponent("foo")</code></p><hr><h1>Base-mod files:</h1><p>These files aren't compulsory, but it is common practice to put them in base mods:</p><p><code>mod/components.md</code> - defines the components for this mod, in markdown<br>
<code>mod/mod_questions.lua</code> - where <code>umg.defineQuestion</code> is used<br>
<code>mod/mod_events.lua</code> - where <code>umg.defineEvent</code> is used<br></p><hr><h1>Runtime client/server checks:</h1><p>Often, we will have code that is running on BOTH client-side AND server-side.<br>
(For example, the <code>onDeath</code> callback)</p><p>To get server/client specific behaviour, we can check what side we are on at runtime!</p><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">local</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">onDeath</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">-- called on client AND server.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> server </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">then</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">-- this branch is only ran on server.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"I AM FROM SERVER"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">elseif</span><span class="token plain"> client </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">then</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">-- only ran on client! :)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"hi from client!"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>You get the idea! :)</p><hr><h1>Classes:</h1><p>Lua doesn't have classes, neither does the UMG engine.<br>
However, the <code>objects</code> base mod provides classes:</p><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">local</span><span class="token plain"> MyClass </span><span class="token operator">=</span><span class="token plain"> objects</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">Class</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"my_mod:MyClass"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> MyClass</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token function" style="color:rgb(80, 250, 123)">init</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">...</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">-- init is a special function that is called on instantiation</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"init!"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">...</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> MyClass</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token function" style="color:rgb(80, 250, 123)">method</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"method call: "</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">local</span><span class="token plain"> obj </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">MyClass</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token number">3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">-- prints:  init! 1 2 3</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The reason this is better than <code>setmetatable</code>, is because <code>objects.Class</code>
will automatically register <code>MyClass</code> with <code>umg.register</code>.</p><p>(WARNING: When defining a class, make sure to define on BOTH client AND server!!!
Else, you'll run into big bad issues.)</p><hr><h1>Functions in components:</h1><p>You may be horrified to realize that in UMG, doing this on serverside will cause a runtime error:</p><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">myComponent </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This is because in UMG, newly defined components are automatically sent over the network.<br>
And in UMG, functions can't be serialized; so an error is thrown.</p><p>But we <em>can</em> have functions as shared components, by defining them inside the entity type.<br>
This is because shared-components aren't sent over the network.</p><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">-- my_mod/entities/my_entity.lua</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    myComponent </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">-- this is ok! :)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><hr><h1>Component-wise bus response:</h1><p>Listen to an event/question, and only respond if the entity has a certain component:<br>
This setup is VERY common (and important) in UMG.</p><ul><li>If an entity has the <code>.halo</code> component:<ul><li>--&gt; draw a circle above it.</li></ul></li></ul><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">umg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">on</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"rendering:drawEntity"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">halo </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">then</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">-- draw a halo above the entity!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        love</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">graphics</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">circle</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"line"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">y </span><span class="token operator">-</span><span class="token plain"> </span><span class="token number">10</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">5</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Comp-wise bus response also works with question buses too:</p><ul><li>If an entity is covered in goo:<ul><li>--&gt; slow the entity</li></ul></li></ul><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">umg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">answer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"xy:getSpeedMultiplier"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">goo </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">then</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token number">0.5</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><hr><h1>Method-Event in base mods:</h1><p>When an event happens concerning an entity, it's common to do something like this:</p><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">-- ent dies!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">local</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">die</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">onDeath </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">then</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token function" style="color:rgb(80, 250, 123)">onDeath</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    umg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">call</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"mod:onDeath"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This is quite flexible, since it allows for other systems to tag onto the death event, but it also allows entity-specific behaviour through our <code>onDeath</code> shared component.</p><p>Examples of this: <code>mortality:entityDeath</code>, <code>rendering:drawEntity</code></p>]]></content:encoded>
            <category>coding</category>
            <category>umg</category>
        </item>
        <item>
            <title><![CDATA[How should we represent entity properties?]]></title>
            <link>https://your-docusaurus-test-site.com/blog/properties</link>
            <guid>https://your-docusaurus-test-site.com/blog/properties</guid>
            <pubDate>Sat, 23 Sep 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[How should properties be represented in video games?]]></description>
            <content:encoded><![CDATA[<p>How should properties be represented in video games?<br>
I.e, maxHealth, damage, speed?</p><p>The naive approach is just to store the value directly:</p><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">damage </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">5</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">-- If we want to increase/decrease damage, just add/subtract:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">damage </span><span class="token operator">+</span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">5</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">-- increase </span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">damage </span><span class="token operator">-</span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">5</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">-- decrease :) </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>But this approach falls apart as soon as we add damage modifiers:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">If ent inside circle</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    gain 2 dmg</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Suddenly, we have to increase/decrease <code>ent</code>s damage every time we enter/exit the circle.<br>
And it gets a bit mucky... What happens if we have these two rules:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">If ent inside circle</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    gain 2 dmg</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">If ent inside square</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    multiple dmg by 2</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Now imagine the following events:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">ent dmg = 5</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ent enters circle (dmg = 5+2 = 7)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ent enters square (dmg = 7*2 = 14)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ent leaves circle (dmg = 14-2 = 12)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ent leaves square (dmg = 12/2 = 6)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ent dmg = 6</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Uh oh!<br>
Yeah this is clearly a terrible way to represent properties.</p><h1>Ok. How should we do it then?</h1><p>Lets create some ideas!</p><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="modifier-list">Modifier list<a href="#modifier-list" class="hash-link" aria-label="Direct link to Modifier list" title="Direct link to Modifier list">​</a></h2><p>IDEA: Have a list of <code>damageAdders</code> and <code>damageMultipliers</code> for our property.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">ent dmgMultipliers = []</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ent dmgAdders = []</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This approach would involve having "modifiers" to the entity property, and when the entity's modifiers are changed, recalculate the property value.</p><p>Recall our circle/square example:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">ent enters circle and square:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">dmgMultipliers = [2] </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">dmgAdders = [2] </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">recalculation -&gt; dmg = 14</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ent exits:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">dmgMultipliers = [] </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">dmgAdders = [] </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">recalculation -&gt; dmg = 5</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Now, TBH, I'm really not a fan of this solution...<br>
Mainly because the damage modifiers have to be added AND THEN removed. If we forget to remove it, then we're screwed!<br>
This is due to it being stateful. I personally try to avoid state when I can.</p><p>Also it's quite restrictive. It's restricting buff types to a flat, unchanging number; and the only operations we can use are addition and multiplication.
Obviously, we could add support for more exotic buff types, but this is getting a bit bloated.</p><p>Surely there's a better way?</p><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="recalculate-per-tick">Recalculate per tick<a href="#recalculate-per-tick" class="hash-link" aria-label="Direct link to Recalculate per tick" title="Direct link to Recalculate per tick">​</a></h2><p>If we have our damage system recalculate the entity's damage each tick,
then we don't need to worry about state, and our issues are solved.</p><p>That would look something like:</p><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token function" style="color:rgb(80, 250, 123)">eachTick</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> ent </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">damageEntities</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">damage </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">calculateDamage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">calculateDamage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    dmg </span><span class="token operator">=</span><span class="token plain"> ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">baseDamage</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> circle</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">contains</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        dmg </span><span class="token operator">+</span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> square</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">contains</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        dmg </span><span class="token operator">*</span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> dmg</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>However, the main glaring "downside" with this approach is that damage values could be incorrect. Take the following example:</p><ul><li>Every time I shoot a bullet, gain +2 damage for 5 seconds<ul><li>shoots 10 bullets in one tick</li><li>--&gt; uh oh! All 10 bullets have the same damage!</li></ul></li></ul><p><strong>PROS:</strong></p><ul><li>No statefulness</li></ul><p><strong>CONS:</strong></p><ul><li>Not the best for performance</li><li>Damage values may be incorrect, since it only refreshes per tick</li></ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="recalculate-whenever">Recalculate whenever<a href="#recalculate-whenever" class="hash-link" aria-label="Direct link to Recalculate whenever" title="Direct link to Recalculate whenever">​</a></h2><p>To avoid the above problem, we can recalculate more often.<br>
How about we recalculate damage every time we need it? i.e:</p><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">shootBullet</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    dmg </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">calculateDamage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">-- same function as above.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    bullet </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">newBullet</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">dmg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This way, if we shoot 10 bullets, then our bullets are guaranteed to have the correct damage values.<br>
The <em>downside</em> is that we are now having to recalculate every time we shoot. Not ideal!</p><p>Likewise, whenever we want to even <em>access</em> the damage property, we must recalculate. That could be pretty bad; but again, it depends on how complex our damage recalculation setup is.</p><p><strong>PROS:</strong></p><ul><li>No statefulness</li><li>Guaranteed accuracy</li></ul><p><strong>CONS:</strong></p><ul><li>Performance can be GARBO, depending on our setup</li></ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="calculation-tree--cache">Calculation tree + cache:<a href="#calculation-tree--cache" class="hash-link" aria-label="Direct link to Calculation tree + cache:" title="Direct link to Calculation tree + cache:">​</a></h2><p>Imagine that we are recalculating the property every time we access it.<br>
Lets say we have benchmarked our program, and we are running into performance issues due to our Shield system. Our shield system is really complicated, and it requires querying over a bunch of other entities when recalculating.</p><p>What we could do here is split our setup into a tree:<br>
In this example, the <code>damage</code> system is querying a bunch of calculator systems to obtain <code>damage</code>.</p><hr><p>With this setup, we can convert the <code>shieldCalculator</code> system into a per-tick system, and add internal caching for efficiency.<br>
This way, the other 2 systems (potions and items) can remain accurate, and it's only the shields that are slightly out of date.</p><p>If we STILL run into performance issues, we can recalculate shields every 5 ticks instead, for example.</p><p>Likewise, if the potion system has a particular potion class that is problematic for performance, then the potion system could split itself up, and do some internal caching on "complex potions" to account:</p><hr><hr><p>You get the idea. :)</p><p>To understand to how the damage calculation system has been implemented in <a href="/blog/umgtech/">UMG</a>, take a look at <a href="/blog/buses/">my article on question buses.</a></p><p>Thanks for reading!</p><ul><li>Oli</li></ul>]]></content:encoded>
            <category>coding</category>
            <category>design</category>
        </item>
        <item>
            <title><![CDATA[Common lua idioms]]></title>
            <link>https://your-docusaurus-test-site.com/blog/luaidioms</link>
            <guid>https://your-docusaurus-test-site.com/blog/luaidioms</guid>
            <pubDate>Fri, 22 Sep 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[I have been using lua for a while. (About 4 years as of writing this!)]]></description>
            <content:encoded><![CDATA[<p>I have been using lua for a while. (About 4 years as of writing this!)<br>
It's a language that I kinda grew up on, and I've learned to love.<br>
This article will contain a list of idioms that are common to see in lua.<br>
Lets go!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="default-values-with-or">Default values with <code>or</code><a href="#default-values-with-or" class="hash-link" aria-label="Direct link to default-values-with-or" title="Direct link to default-values-with-or">​</a></h2><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">local</span><span class="token plain"> x </span><span class="token operator">=</span><span class="token plain"> obj</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">x </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">or</span><span class="token plain"> </span><span class="token number">15</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">-- in lua, accessing an undefined table value defaults to `nil`.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">-- `nil` and `false` are falsey values,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">-- So in this example,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">-- If `obj` doesnt have the `.x`, then it will fall back to 15.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">-- another common use case:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">obj</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">x </span><span class="token operator">=</span><span class="token plain"> obj</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">x </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">or</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="optional-arguments">Optional arguments:<a href="#optional-arguments" class="hash-link" aria-label="Direct link to Optional arguments:" title="Direct link to Optional arguments:">​</a></h2><p>In lua, passing less or more arguments doesn't error.</p><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">local</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">f</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">f</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token number">3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">-- this is fine. output: 1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">f</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">-- this is fine. output: nil</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>We can use this to have optional arguments:</p><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">-- euclidean distance:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">local</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">distance</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> z</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    z </span><span class="token operator">=</span><span class="token plain"> z </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">or</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">-- z is an optional argument!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">local</span><span class="token plain"> dx</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> dy</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> dz </span><span class="token operator">=</span><span class="token plain"> x</span><span class="token operator">*</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> y</span><span class="token operator">*</span><span class="token plain">y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> z</span><span class="token operator">*</span><span class="token plain">z</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">dx</span><span class="token operator">+</span><span class="token plain">dy</span><span class="token operator">+</span><span class="token plain">dz</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">^</span><span class="token plain"> </span><span class="token number">0.5</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token function" style="color:rgb(80, 250, 123)">distance</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token number">4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">-- 5</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token function" style="color:rgb(80, 250, 123)">distance</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token number">4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token number">5</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">-- 7.071</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="error-on-undefined-access">Error on undefined access<a href="#error-on-undefined-access" class="hash-link" aria-label="Direct link to Error on undefined access" title="Direct link to Error on undefined access">​</a></h2><p>In lua, if you access an undefined variable, that variable returns nil.
Example:</p><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">undefined_variable_34389439</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">-- nil</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">-- no error!</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This is a bit weird, and some people don't like it.<br>
But we can change this with <code>__index</code> and <code>setmetatable</code>.</p><p>In lua, <code>_G</code> is the special table that holds all the globals.</p><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">local</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">err</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">t</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">v</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Accessed an undefined variable: "</span><span class="token plain"> </span><span class="token operator">..</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">tostring</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">setmetatable</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">_G</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    __index </span><span class="token operator">=</span><span class="token plain"> err</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Now, if we access an undefined variable:</p><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">undefined_variable_34389439</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">-- Error: main.lua:4:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">-- Accessed an undefined variable: undefined_variable_34389439</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>You can do the same with <code>__newindex</code> if you want to stop pollution of the global namespace on accident.</p><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="private-class-methods">Private class methods<a href="#private-class-methods" class="hash-link" aria-label="Direct link to Private class methods" title="Direct link to Private class methods">​</a></h2><p>For the OOP folks out there, who want private methods.</p><p>Often in lua, you'll see a class setup like so:</p><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">local</span><span class="token plain"> MyClass </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">Class</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> Class</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token function" style="color:rgb(80, 250, 123)">init</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">x </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">y </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> Class</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token function" style="color:rgb(80, 250, 123)">privateHi</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">-- ugh, I wish this could be private!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> Class</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token function" style="color:rgb(80, 250, 123)">hi</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token function" style="color:rgb(80, 250, 123)">privateHi</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"hiiii"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Private methods can be done like so.</p><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">local</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">privateHi</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">-- yay, now i am private!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> Class</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token function" style="color:rgb(80, 250, 123)">hi</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">privateHi</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"hiiii"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>At first, you may feel uneasy doing it this way, or you may feel cheated.<br>
Realize though, that all functions in lua are anonymous and first-class. <code>privateHi</code> has the exact same bytecode as <code>Class:privateHi</code>:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">0000    FUNCF    4 </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">0001    GGET     1   0      ; "print"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">0002    MOV      3   0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">0003    CALL     1   1   2</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">0004    RET0     0   1</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The only difference is that one is inside a table, and one is a local.</p><hr>]]></content:encoded>
            <category>coding</category>
        </item>
        <item>
            <title><![CDATA[Arguments for and against versioning]]></title>
            <link>https://your-docusaurus-test-site.com/blog/versioning</link>
            <guid>https://your-docusaurus-test-site.com/blog/versioning</guid>
            <pubDate>Sun, 17 Sep 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[(This article requires a basic understanding of my vision for Untitled Mod Game. If you are unfamiliar, have a quick skim.)]]></description>
            <content:encoded><![CDATA[<p><em>(This article requires a basic understanding of my vision for Untitled Mod Game. If you are unfamiliar, <a href="/blog/versioning/umgtech/">have a quick skim</a>.)</em></p><p>In Untitled Mod Game, there is going to be no versioning of mods.<br>
This is a very bold call, and it sounds stupid at face value.
But please, hear me out!
This lil article will explain my thought process.</p><hr><p>In pretty much all software packaging systems, software has
version information.<br>
Versioning is great, because it allows introducing breaking changes to software without harming existing users.</p><p>And that's pretty much the main "point" of versioning, is dealing with breaking changes.
If users don't want to deal with breaking changes, they can just stay on an older version.</p><p>Pros of versioning:</p><ul><li>Allows developers to break compatibility in favour of better features or removal of tech debt</li><li>Users can use older versions if they want, granting a lot more freedom</li></ul><p>Cons of versioning: (no major cons, really)</p><ul><li>Userbase can become fragmented</li></ul><hr><p>Now, before we start, I'd just like to note,
I'm <strong>100% FOR</strong> the use of versioning, and I think you'd have to be an idiot not to see the value in it for 99% of situations.</p><p>But UMG is a bit special in what it's trying to achieve.<br>
There's a very concerning situation where versioning could yield to a bit of a mess, I'll explain it below.</p><hr><p>Let's do a thought experiment, lets assume that mods ARE versioned in UMG.</p><p>As discussed in <a href="/blog/versioning/umgtech/">my other article</a>, a central goal of the UMG ecosystem is to ensure hyper-compatibility between mods.</p><p>I want to be able to load the <code>ridable</code> mod, and have it work fully with the <code>projectiles</code> mod. That way, I can ride my horse off into the sunset, weilding my minigun, and rocking a cowboy hat.</p><p>Ideally, the <code>projectiles</code> mod should not need to care about the <code>ridable</code> mod. In fact, both mods should not know about each other, since they are unrelated.<br>
However, both mods will still need to tag onto other mods.
Both the <code>projectiles</code> mod, and the <code>ridable</code> mod will need the <code>dimensions</code> mod to be loaded, so that they can fudge around with what dimensions steeds are in, and what dimensions projectiles are spawned in.</p><p>But lets assume that there was a breaking change in the <code>dimensions</code> mod, from version 0.0 to version 1.0, which overhauled the way entities are stored inside of dimensions, and changed a few things about the API.</p><p>Lets say that the <code>riding</code> mod updated to the latest version, but the author of the <code>projectiles</code> mod disagreed with the changes, so they stayed on the older version.<br>
Suddenly, we would have a setup like so:</p><p>Now, what fricken SUCKS, is that <code>riding</code> and <code>projectiles</code> are no longer compatible.<br>
Why? Because they use two different versions for the <code>dimensions</code> mod.
When entites are emplaced into a world, their <code>.dimension</code> component is going to be handled (and mangled) by two competing systems; one in <code>dimensions_v1</code>, and one in <code>dimensions_v0</code>.<br>
This is terrible.</p><p>Now, one could argue that this "issue" is the fault of whoever wrote the dimensions mod.<br>
And I would 100% agree. But that's kinda ignoring the real issue here. The real issue, is that this setup, (where <code>riding</code> and <code>projectiles</code> use different versions) is ALLOWED to exist.</p><p>The <code>riding</code> mod works fine on it's own.<br>
The <code>projectiles</code> mod works fine on it's own too!<br></p><p>But what's bad, is that this setup will spread like a cancer. Any mods that build on top of <code>riding</code> will no longer be able to use the <code>projectiles</code> mod. Same vice versa. We have created a situation where our beautiful degree of hyper-compatibility is killed.</p><p>It would have been much better if whoever wrote <code>projectiles</code> was instead forced to use <code>dimensions_v1</code>; that way, compatibility between mods is guaranteed.</p><hr><p>To hammer it home, here's a (simplified) version of the dependency tree for the existing UMG mod, <code>test</code>:</p><p>I simplified the diagram greatly, because the original was too cluttered and hard to read. (roughly half the edges have been omitted.)</p><p>Can you <em>imagine</em> what a nightmare this would be, if every mod was able to use it's own versions for stuff?<br>
It just wouldn't be possible. Versioning is not compatible with UMG's vision. </p><p>But as stated previously... versioning IS useful, mainly for dealing with breaking changes. So how does UMG deal with breaking changes?</p><p>Well... it doesn't.<br>
Breaking changes will simply have to be avoided. To be fair, Java is a programming language <a href="https://blog.jooq.org/the-lame-side-of-javas-backwards-compatibility/" target="_blank" rel="noopener noreferrer">that has taken this exact approach</a>, and hey, they haven't done too poorly.</p><p>The main painstaking downside of this setup is that we are ASSUMING that the base mods are going to be developed in a forward thinking, robust manner.<br>
That is, developed free of future tech debt, and developed with all future requirements predicted for, (an impossible task.)<br>
Unfortunetely, I don't believe there is another solution. C'est la vie, brother!</p>]]></content:encoded>
            <category>design</category>
            <category>umg</category>
        </item>
        <item>
            <title><![CDATA[Why should I use an Entity Component System?]]></title>
            <link>https://your-docusaurus-test-site.com/blog/ECS</link>
            <guid>https://your-docusaurus-test-site.com/blog/ECS</guid>
            <pubDate>Mon, 10 Jul 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[ECSes are really cool and fun! This article will explain why I love them so much.]]></description>
            <content:encoded><![CDATA[<p>ECSes are really cool and fun! This article will explain why I love them so much.</p><p>If you drop an apple from an aeroplane, sooner or later, it will hit the ground,
and no longer be an apple.<br>
And the same can be said about pears. And bananas. And most other objects,
for that matter.</p><p>The reason this happens is because of gravity.
Gravity is a rule that works on every object in the universe, which is how rules are supposed to work.</p><hr><p><img loading="lazy" alt="apple_falling" src="/assets/images/apple_falling-17185aa8f5d4043e8a8c009704aa9bd0.jpg" width="1920" height="1920" class="img_ev3q"></p><hr><p>In software development, it seems like a lot of rules aren't programmed this way.
With the rise of OOP, programmers have been fixated on binding behaviour to objects,
instead of binding behaviour to the system itself.</p><p>And in gamedev, this is something that has been challenged. (a lot.)
Classic Entity Component System (ECS) architecture goes as far to say that no behaviour
should be bound to game entities at all; they should only have data, and systems (rules)
should then act on that data in a global fashion.</p><p>To sum it up from a gamedev perspective:<br></p><ul><li>In classic OOP fashion, game entities contain functions. These functions define the behaviour of the entity.</li><li>In classic pure ECS architecture, game entities are not allowed to contain functions. Behaviour is instead defined by "systems", which are external scripts that act on entities.</li></ul><p>But hang on... what even is a component? Or an entity, or a system?</p><table><thead><tr><th>Concept</th><th>Explanation</th></tr></thead><tbody><tr><td>Component</td><td>Plain old data with a name. Like a position, or an image</td></tr><tr><td>Entity</td><td>A game object. E.g. an apple, truck, or human. Contains one or more components, grouped together. Does not contain code</td></tr><tr><td>System</td><td>Code that processes all entities with certain components</td></tr></tbody></table><p><img loading="lazy" alt="ecs" src="/assets/images/ECS-133d8169aa1582c28bdbbe699b21b9ac.png" width="610" height="497" class="img_ev3q"></p><p>To better explain, I'll write a quick hacky example in pseudocode:</p><p>Entities / components:</p><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">-- an entity containing x, y, image components</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">local</span><span class="token plain"> ent </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    x </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">5</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">-- `x` component</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    y </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">15</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">-- `y` component</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    image </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"cat"</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">-- `image` component</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Systems:</p><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">--[[</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">This is a view of entities that have all these components: (x, y, image)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">(We don't care what other components the entity may have.)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">]]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">local</span><span class="token plain"> drawEntities </span><span class="token operator">=</span><span class="token plain"> entityGroup</span><span class="token operator">&lt;</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> image</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">draw</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">-- called whenever we draw to screen</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> ent </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">drawEntities</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token function" style="color:rgb(80, 250, 123)">draw</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">image</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>In this example, we create a global rule.<br>
We say: for all entities that have <code>x, y, image</code> components,
we will draw these entities to the screen.</p><p>Similar to how gravity is applied globally to all objects,
we are applying our draw rule globally to all entities that fit the profile.</p><p>This allows us to create much more natural rules, which can give way for some nice emergence.
(I wrote <a href="/blog/emergence/">another blog post on emergence</a>, you should give it a read!)</p><p>However, the biggest benefit to ECS is not actually the "naturalness" of it;
rather, the biggest benefit is <em>scalability in design.</em><br>
We have applied a <em>global</em> rule to entities. And if you know anything about software
design, alarm bells should be going off right now. Generally, global state and
global behaviour is really bad, since it leaks out into the rest of the software and causes
a big mess.<br>
But in this case, our global rule is not actually leaking anywhere.<br>
It's entirely contained within the draw system. Isn't that beautiful?<br>
When we go write a new system, we don't need to care AT ALL about this global rule we made.
The only thing we need to care about are the components. But that's completely fine,
because those entities were going to have those components anyway. Besides, there is no
funky behaviour tied up in the components; they are just data.</p><p>In fact, we can even create a new system, say, <code>AnimationSystem</code> that changes the <code>image</code> component
with respect to time to give entities an animation effect.
What's beautiful, is that the <code>AnimationSystem</code> <em>does not need to care</em> about the draw system at all.
The systems are effectively communicating through components.</p><p>And we don't stop there. We can keep scaling. We can keep adding as many systems, as many rules as we want,
and none of the systems will ever need to interact with each other.
And with every system we add, remember that the rules are applied <em>globally</em>.</p><p>And that's what I find so amazing about this setup. Each system is just fudging with data.
No system needs to know more than neccessary; there are no monolithic systems that know too much,
every system only takes the bare minimum, and outputs the bare minimum.
And we can afford to do the minimum, because our rules are applied globally; although are
rules may not be doing much on their own, if we add all our rules together, we get a big complex
system that is super easy to break down.</p><p>And that's it! I probably ranted for too long here, but you get the idea.<br>
I see a lot of articles online praising ECS for it's cache performance benefits, and it's
ability to handle large swathes of entities. While this is true, I think what's more important is the
architectural side of it.
It allows us to handle massively complex systems whilst still being hyper-modular and hyper-generic.</p><hr><p>Before I end this blog post, I want to discuss what I use for my project.
Because I don't exactly use a pure ECS as it stands, but most of my ideas have been
adapted from the classic ECS setup:</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="optional-reading-what-does-umg-do">(Optional reading) What does UMG do?<a href="#optional-reading-what-does-umg-do" class="hash-link" aria-label="Direct link to (Optional reading) What does UMG do?" title="Direct link to (Optional reading) What does UMG do?">​</a></h2><p>Untitled Mod Game is a project I've been working on for a while.
UMG uses a "special" ECS setup.<br>
I call it "special", because we break a few rules:</p><p><strong>RuleBreak 1:</strong> in UMG, entities are typed. (Classic ECS has no types for entities)<br>
<strong>RuleBreak 2:</strong> in UMG, entities can contain functions (OMG!!! EVIL!)<br></p><p>To visualize things, here is what an entity definition could look like in UMG:</p><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">-- a button entity that resets the board state when clicked</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">local</span><span class="token plain"> resetButton </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    image </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"button1"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    buttonPressAnimation </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        frames </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token string" style="color:rgb(255, 121, 198)">"button1"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"button2"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"button3"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        time </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0.5</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    buttonPressSound </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"click"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    onButtonPress </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        board</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token function" style="color:rgb(80, 250, 123)">reset</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>So, what's the reasoning behind breaking these two rules?</p><p>Rule 1 (entities having types) is broken partially for efficiency reasons.<br>
With types, we can share static data across entities of the same type.
It also means that redundant data doesn't need to be sent over the network.
All in all, it's just a bit nicer.<sup id="fnref-1-a3c1b7"><a href="#fn-1-a3c1b7" class="footnote-ref">1</a></sup></p><p>Rule 2 (entities containing functions) is broken for practical reasons.<br>
In my opinion, practicality is ALWAYS more important than ideology.
Sure, in theory, it makes sense for entities to never contain functions.<br>
But what about really niche cases? For example, what if I want to make a gun that clones entities when shot?<br>
Well, let's try implement it!</p><p>We have a few options here:<br></p><p><strong>OPTION 1:</strong> Hardcode the clone gun behaviour inside a system that only the clone gun uses.  (Bad, because we are creating a global rule that will only affect one entity type)<br>
<strong>OPTION 2:</strong> Create a sophisticated command-template system. The clone gun can then use an on-hit clone command that's ran when the bullet hits an entity. (Better, but a blatant violation of YAGNI.)<br>
<strong>OPTION 3:</strong> Hardcode the clone gun behaviour inside a function within the clone gun entity. (Violation of pure ECS principles, but other than that, the easiest solution)</p><p>Option 1 is obviously stupid, so lets just ignore it.</p><p>Lets look at what option 2 could look like:</p><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">-- clone gun entity:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">local</span><span class="token plain"> cloneGun </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    gun </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> bullets </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> bulletSpeed </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">200</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    bulletHitEffect </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">effect </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"clone"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> target </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"target"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">-- But remember, we also need a system to intercept the bullet behaviour:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">-- bulletSystem.lua:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">local</span><span class="token plain"> effects </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">local</span><span class="token plain"> targets </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">umg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">on</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"entityCollide"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">e1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> e2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> e1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">bullet </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">then</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">-- logic for applying the bullet hit effect here.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">...</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">-- apply effect enum to target</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>And now, the 3rd option:</p><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">-- clone gun entity:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">local</span><span class="token plain"> cloneGun </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    gun </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> bullets </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> bulletSpeed </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">200</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">-- In this example, we put the cloning behaviour directly inside of the</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">-- clone gun entity.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">-- This is a violation of ECS principles, because behaviour is supposed to be</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">-- applied globally...     but it gets the job done.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    bulletHit </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> bulletEnt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> hitEnt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        hitEnt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token function" style="color:rgb(80, 250, 123)">deepClone</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>In an ideal world, option 2 would be the best. </p><p>But the world is not ideal. Us programmers have limited time.<br>
And in the case of UMG, <em>modders</em> have limited patience.
Are people really going to want to create a whole new system just to clone an entity?<br>
Hell nah! People probably just want to see themselves clone their buddies as fast as possible.</p><p>So therefore, UMG allows functions inside of entities.
Not because its good, but because I believe <strong>practicality &gt; ideology</strong>.</p><p>Anyway, that's it for this blog post.</p><p>Thanks for reading this opinion piece!</p><ul><li>Oli</li></ul><div class="footnotes"><hr><ol><li id="fn-1-a3c1b7">(Quick note: In most ECSes, entities having no types is due to entities being represented as a single integer. From there, component data is packed into big cache-friendly PoD arrays that systems can zoom over and transform super quickly. UMG is using lua, which doesn't have the cache optimization opportunities that most low level languages have. Hence, entities being explicit types is not harmful to performance since we can't optimize for cache misses anyway lol! I just wanted to emphasize this, because I made it sound like entities being untyped came from an architectural standpoint, whereas it's rather mainly from a performance standpoint.)<a href="#fnref-1-a3c1b7" class="footnote-backref">↩</a></li></ol></div>]]></content:encoded>
            <category>design</category>
            <category>opinion</category>
        </item>
        <item>
            <title><![CDATA[Technical implementation details for UMG]]></title>
            <link>https://your-docusaurus-test-site.com/blog/umgtech</link>
            <guid>https://your-docusaurus-test-site.com/blog/umgtech</guid>
            <pubDate>Fri, 02 Jun 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[----------------------------]]></description>
            <content:encoded><![CDATA[<hr><p>"Untitled Mod Game" (or "UMG" in short) is a multiplayer
game that is based on mods.</p><p>I've been developing it for many months at this point, and it's been really fun!</p><p>It's setup is similar to that of Garrys Mod,
where most playable content is User-generated.</p><hr><p>However, UMG seeks to take things a bit further, and address
a few issues that exist with the traditional traditional modding approach.</p><p><strong>Traditional modding approach:</strong></p><p><img loading="lazy" alt="traditional" src="/assets/images/regular_modding-0d391365f272fd23cff59af7cbb3c8e0.png" width="388" height="443" class="img_ev3q"></p><hr><p>With UMG, we have two "types" of mods: "Base" and "Playable" mods.</p><ul><li><p>Base mods:</p><ul><li>provide tools and infrastructure for modders to create content</li><li>do not provide any playable content</li></ul></li><li><p>Playable mods:</p><ul><li>provide gameplay and content</li></ul></li></ul><p>What's interesting about this setup, is that there is no "game".
<em>Everything</em> is built as a mod.<br>
Here's a diagram of what UMG would look like, under the same setup:</p><p><img loading="lazy" alt="cooperative_modding" src="/assets/images/cooperative_modding-fa329f06d8f98223a56991e3076b653e.png" width="823" height="445" class="img_ev3q"></p><hr><p>But, what's the point of this?<br>
How is this any better than the former setup?<br></p><p>To explain the point of this, we need to understand what I call
"The Riding problem".</p><h1>The riding problem:</h1><p>Lets imagine that we have 2 modders, "John" and "Mary".</p><p>Mary likes elephants, so she is making an elephant riding mod.
John likes horses, so he is making a mod where you can ride horses.</p><p>Both Mary and John go about their business, and create their mods.
Since there is no way for John and Mary to communicate, they both code
the riding behaviour independently.</p><p>This is <em>terrible</em>.<br>
Why?  Well, the code for riding animals has been written twice independently.
Which is a big waste of time!</p><p>It would be much better if John and Mary's mods both "extended" a common mod,
e.g, the "Ridable Animals Mod".
This way, code is only written once in a generic fashion, and time is saved.</p><p>But actually, there's a bigger problem than "duplicate code": <em>Compatibility.</em><br>
Imagine if someone loads the ridable elephants mod, and the ridable horses mod at the same time.<br>
Imagine the player jumps on a horse, and then goes over to an elephant,
and tries to ride the elephant <em>whilst riding</em> the horse.</p><p>At best, nothing happens.<br>
At worst, the game crashes, or they get glitched across the world in an unpredictable fashion.</p><p>Without John and Mary following a standard protocol, there is no way for them
to know if they are breaking each others work.</p><hr><p>Ideally, in UMG, the "ridable" behaviour would be extrapolated to a "Base" mod.
The "Playable" mods, (ridable horses and ridable elephants) could then extend the "ridable" mod.</p><h1>Technical implementation:</h1><p>So this setup is cool and all, but how would this work in a technical sense?<br>
How do mods know about each other in this way?<br>
Also, what stops other base mods from being incompatible with each other, causing the same class of problems?</p><p>To understand this, lets do a quick overview of UMG architecture:</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-umg-entity-component-system">The UMG Entity Component System:<a href="#the-umg-entity-component-system" class="hash-link" aria-label="Direct link to The UMG Entity Component System:" title="Direct link to The UMG Entity Component System:">​</a></h2><p><em>If you have never heard of ECSes in a gamedev context, I recommend looking it up real quick.</em></p><p>In UMG, everything in the world is an entity.
Players, bullets, enemies, trees, grass, are all entities.<br>
Entities exist on both the server and the client; however only the server
has the authority to create and delete them.</p><p>A <code>Group</code> is like an array that holds entities. (&lt;-- Remember this, it's important.)<br>
Entities are automatically added to groups if they have the required components for that group.</p><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">-- Here's a group with components  .x, .y  .image  </span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">-- All entities with these components are added to myGroup automatically.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">local</span><span class="token plain"> myGroup </span><span class="token operator">=</span><span class="token plain"> umg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">group</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"x"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"y"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"image"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Our "Systems" then will iterate over <code>group</code>s of entities,
executing code and changing the state of entities as they go.</p><p>So, back to the example from before. With the ridable horses and elephants.
With our setup, we could have both horses and elephants contain a <code>ridable</code>
component, and have a system act on all entities with <code>x, y, ridable</code> components.</p><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">local</span><span class="token plain"> ridableGroup </span><span class="token operator">=</span><span class="token plain"> umg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">group</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"ridable"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"x"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"y"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">local</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">update</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> ent </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> ridableGroup </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">do</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">local</span><span class="token plain"> riderEnt </span><span class="token operator">=</span><span class="token plain"> ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">rider</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> riderEnt </span><span class="token operator">~=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">nil</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">then</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token comment" style="color:rgb(98, 114, 164)">-- set the rider's position to the steed ent.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            riderEnt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">x </span><span class="token operator">=</span><span class="token plain"> ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">x</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            riderEnt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">y </span><span class="token operator">=</span><span class="token plain"> ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">y</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            riderEnt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">z </span><span class="token operator">=</span><span class="token plain"> ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">z </span><span class="token operator">+</span><span class="token plain"> ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">ridable</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">rideHeight</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">-- Code for mounting.  This can be called by other mods, and is</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">-- called automatically when the player clicks on the steed.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">local</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">mount</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">steedEnt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> riderEnt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">not</span><span class="token plain"> ridableGroup</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token function" style="color:rgb(80, 250, 123)">has</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">steedEnt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">then</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token function" style="color:rgb(80, 250, 123)">error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"this entity isn't ridable!"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    steedEnt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">rider </span><span class="token operator">=</span><span class="token plain"> riderEnt</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">...</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">-- more code here, etc</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>I'd also like to point out that <code>riderEnt</code> does not neccessarily have to be a player.
In UMG, there's not really such thing as a "player"; a player is just a regular entity.<br>
With this generic setup, we can have any entity type doing the riding. Which allows cool stuff such as:</p><ul><li>Enemies on horses</li><li>Horses with chests on their back (chest entity is riding)</li><li>Horses with lights on their back (torch entity is riding)</li><li>Elephants with gun turrets on their back (turret entity is riding)</li></ul><p>But anyway, that's getting sidetracked.<br>
The main point of this is that now both the horse and the elephant can follow a
standard protocol for riding:</p><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">-- Horse entity</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  image </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"horse"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  ridable </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    rideHeight </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">10</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  speed </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">45</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">-- Elephant entity</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  image </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"elephant"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  ridable </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    rideHeight </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">28</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  speed </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">10</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Awesome!  Now, John and Mary's mods work together just fine. </p><hr><p>Unfortunetely, Mary and John still have some problems that need to be addressed.</p><p>In John's horse riding mod, he wants to limit horse riding to the "knight" class.<br>
In Mary's elephant riding mod, she wants the elephants to flap their ears when the player mounts.</p><p>But... how can this be solved?<br>
Remember, the <code>riding</code> mod is a <em>base mod.</em>
Which means it knows NOTHING about the current game context; all it cares about is the <code>ridable</code> component.</p><p>So, the <code>riding</code> mod knows NOTHING about elephant ears.<br>
It also knows NOTHING about "knights" either. The concept of "knights" may not even exist, depending on what mods are loaded!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="mod-communication-through-event-buses">Mod communication through event buses:<a href="#mod-communication-through-event-buses" class="hash-link" aria-label="Direct link to Mod communication through event buses:" title="Direct link to Mod communication through event buses:">​</a></h2><p>To give Mary and John the tools to solve this problem, we can use <a href="/blog/buses/">event-buses and question-buses.</a></p><p>Specifically, John and Mary need two things:</p><ul><li>Mary needs an event to be emitted whenever a ridable entity is mounted</li><li>John needs to signal to the <code>riding</code> mod that horses can't be mounted unless the entity is of knight class</li></ul><p>So, lets update our <code>mount</code> function from before:</p><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">local</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">mount</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">steedEnt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> riderEnt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">not</span><span class="token plain"> ridableGroup</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token function" style="color:rgb(80, 250, 123)">has</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">steedEnt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">then</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token function" style="color:rgb(80, 250, 123)">error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"this entity isn't ridable!"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">-- John needs to answer this question</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> umg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">ask</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"ridingNotAllowed"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> OR</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> steedEnt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> riderEnt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">then</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">-- not allowed!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">-- Mary needs this event</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    umg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">call</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"entityMounted"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> steedEnt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> riderEnt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    steedEnt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">rider </span><span class="token operator">=</span><span class="token plain"> riderEnt</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Now, John and Mary can tag into these events, like so:</p><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">-- John's code:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">umg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">answer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"ridingNotAllowed"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">steedEnt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> riderEnt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> steedEnt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">animalType </span><span class="token operator">==</span><span class="token plain"> HORSE </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">and</span><span class="token plain"> riderEnt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">class </span><span class="token operator">~=</span><span class="token plain"> KNIGHT </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">then</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">-- Mary's code:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">umg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">on</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"entityMounted"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">steedEnt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> riderEnt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> steedEnt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">animalType </span><span class="token operator">==</span><span class="token plain"> ELEPHANT </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">then</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token function" style="color:rgb(80, 250, 123)">flapElephantEars</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">steedEnt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Voila! Now, Mary and John can both have what they want, and
<em>what's best</em>, is that their code is still 100% compatible.<br>
Isn't that beautiful?</p><p>This idea where mods are forced to be hyper-generic and hyper-compatible is a central goal of the UMG ecosystem.</p><p>Other mods may also tag onto this stuff, and it will be 100% fine,
since the <code>ridable</code> mod doesn't care (and doesn't even know) what mods are listening
to the events and answering the questions.</p><p>For example, maybe we want to have two teams, RED and BLUE.<br>
This code makes it so only Blue team can use Blue horses, and same for Red:</p><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">-- Team system</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">umg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">answer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"ridingNotAllowed"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">steedEnt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> riderEnt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> steedEnt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">team </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">and</span><span class="token plain"> riderEnt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">team </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">and</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">steedEnt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">team </span><span class="token operator">~=</span><span class="token plain"> riderEnt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">team</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">then</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">-- not in same team! disallow riding.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">-- entities are either in same team, or don't have a team.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">false</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>What's great, is that this code is 100% compatible with John and Mary's code from before.
It's just <em>beautiful</em>.</p><h1>Mod communication through components:</h1><p>Events buses are not the only way mods can communicate.<br>
Often, communication is done by simply changing component values from within entities.</p><p>Here's an example:</p><hr><p>Lets say we want our mod to render entities:</p><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">-- rendering system</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">local</span><span class="token plain"> drawGroup </span><span class="token operator">=</span><span class="token plain"> umg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">group</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"image"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"x"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"y"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">local</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">draw</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">-- this draw function is called every frame</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> ent </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> drawGroup </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">do</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        graphics</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">draw</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">image</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>In this base mod, anything with an image, x, and y will be drawn to the screen.</p><p>To use this functionality, we can simply add the <code>x, y, image</code> components to one of our entities:</p><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">local</span><span class="token plain"> ent </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">newEntity</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">x </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">10</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">y </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">15</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">image </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"banana"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Now, this entity will be drawn to the screen automatically, at position (10, 15), with image "banana".</p><p>Awesome!<br>
Okay, but what if we want an animation?</p><p>To handle animation, we can have another system that <em>changes</em> the <code>.image</code> component
with respect to time.<br>
For example:</p><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">-- animation system</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">local</span><span class="token plain"> animationGroup </span><span class="token operator">=</span><span class="token plain"> umg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">group</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"animation"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">local</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">update</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">-- this function is called every frame</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">local</span><span class="token plain"> time </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">getTime</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> ent </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> animationGroup </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">do</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">image </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">getAnimationImage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">animation</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> time</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>What's cool, is that this animation code and the rendering code from before
can be in entirely different systems, or even in <em>entirely different mods.</em></p><p>Here, the <code>animation</code> system is assuming that the rendering code will handle
the drawing of the entity, so all that it needs to care about is setting the image.</p><p>It's beautiful, right? :)</p><h1>To conclude:</h1><p>This document gives a brief overview of some design challenges (and solutions) that the UMG ecosystem has to deal with.</p><p>I hope that the whole Base-mod / Playable-mod setup is a lot clearer, and I hope the
reasoning behind it makes sense now.<br>
It's certainly a challenging and interesting project, and I absolutely wish to see it through.</p><p>Thanks for reading.</p><ul><li>Oli</li></ul>]]></content:encoded>
            <category>design</category>
            <category>umg</category>
            <category>coding</category>
        </item>
        <item>
            <title><![CDATA[Question buses in UMG]]></title>
            <link>https://your-docusaurus-test-site.com/blog/buses</link>
            <guid>https://your-docusaurus-test-site.com/blog/buses</guid>
            <pubDate>Wed, 10 May 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Question buses are a cool idea! This article will explain what they are.]]></description>
            <content:encoded><![CDATA[<p>Question buses are a cool idea! This article will explain what they are.</p><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="prelude">PRELUDE:<a href="#prelude" class="hash-link" aria-label="Direct link to PRELUDE:" title="Direct link to PRELUDE:">​</a></h2><p><em>This reading requires a basic understanding of my vision for Untitled Mod Game:</em><br>
All you need to know is that there are two types of mods, "Base mods",
and "Playable mods."</p><ul><li><p>Base mods:</p><ul><li>provide tools and infrastructure for modders to create content</li><li>do not provide any playable content</li></ul></li><li><p>Playable mods:</p><ul><li>provide gameplay and content</li></ul></li></ul><hr><h1>Before we look at question buses, lets understand event buses.</h1><p>Event bus diagram:</p><p><img loading="lazy" alt="event_bus" src="/assets/images/event_bus-d978dba52e430e92aac31371895ed9d5.png" width="1413" height="1083" class="img_ev3q"></p><p>Event buses are an <em>awesome</em> tool in the context of Untitled Mod Game.</p><p>Whenever a significant action happens in a base mod, that base mod can simply
emit an event to tell other mods that something interesting happened.</p><p>What's beautiful, is that the base mod emitting the event doesn't care who's listening.
It just throws the event into the void; the systems that care about it will
tag into it. Perhaps no one is listening! Perhaps 10 other mods are listening.
The base mod doesn't care.</p><p>A good example of this is the <code>entityDeath</code> event.<br>
This event is called automatically when an entity dies, and the entity is
passed in as the first argument, like so:</p><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">-- base mod</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">umg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">call</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"entityDeath"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>If other systems want to listen to this event, they can use <code>umg.on</code>:</p><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">-- Meanwhile, in a completely different mod:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">umg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">on</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"entityDeath"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">-- plays a death sound when an entity dies.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">deathSound </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">then</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token function" style="color:rgb(80, 250, 123)">playSound</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">deathSound</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Now, this stuff is pretty basic, and this is nothing new. Event buses are a common
pattern, especially in game development.</p><p>I could give examples of the entity emitting blood particles if it has the <code>meat</code> component,
or spawning a full-health copy of itself if it has the <code>secondLife</code> component, but that's not the point
of this post.</p><h1>The problem space:</h1><p>Okay, so event buses are great for dispatching information when we are within an unknown context.</p><p>But sometimes we don't want to dispatch information.<br>
Instead, we may want to <em>receive</em> information.</p><p>Behold, the holy <em>question bus</em>!!</p><p>(I think it's best explained if I give a problem statement, and an example.)</p><p>Lets imagine that we have a system for attacking entities.<br>
This system needs to know if an entity can attack or not.<br>
But it doesn't know what other mods are loaded! It also doesn't know the context of the game
outside of it's pure little abstract layer.</p><p>So, we turn to <em>question buses.</em></p><hr><p>With question buses, we have two functions: </p><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">-- asks a question</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">umg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">ask</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">question</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> reducer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">...</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">-- answers a question</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">umg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">answer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">question</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> answerFunc</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>ask</code> is similar to <code>call</code>, in that it initiates the "interaction".</p><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">-- attack system</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">local</span><span class="token plain"> reducer </span><span class="token operator">=</span><span class="token plain"> operators</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">OR</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">local</span><span class="token plain"> isAttackBlocked </span><span class="token operator">=</span><span class="token plain"> umg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">ask</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"isAttackBlocked"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> reducer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> entity</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> targetEntity</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>reducer</code> is the reducer function; it reduces all the answers to one value
by repeatedly applying itself to the answers.<br>
(By nature, the reducer needs to be associative and commutative,
So functions like <code>SUM</code> or <code>AND</code> would also work.)</p><hr><p><code>answer</code> is similar to <code>on</code>, in that it responds to a question.<br>
Instead of executing something, however, the <code>answer</code> should ideally be a pure
function that just returns a result. For example:</p><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">-- team handler system</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">umg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">answer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"isAttackBlocked"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">entity</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> targetEntity</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> entity</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">team </span><span class="token operator">==</span><span class="token plain"> targetEntity</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">team </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">then</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">-- the entities are in the same team, so the attack should be blocked.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>We may also have another answer, e.g. inside the stun system:</p><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">umg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">answer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"isAttackBlocked"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">entity</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> targetEntity</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> entity</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">stunned </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">then</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">-- entity is stunned, and cannot attack</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">true</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">end</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>If either of these "answerers" return true, then the attack is blocked.</p><hr><p>Here's an image that hopefully clarifies the idea further:</p><p><img loading="lazy" alt="question_bus" src="/assets/images/question_bus-9e398a2cacd9fcbfdf2df65097979097.png" width="2283" height="1413" class="img_ev3q"></p><hr><p>All in all, the pattern can be summarized simply as so:</p><ul><li><p>Regular event buses:</p><ul><li>Dispatch information in an abstract manner</li><li>Doesn't care who is listening</li></ul></li><li><p>Question buses:</p><ul><li>Gather information in an abstract manner</li><li>Doesn't care who gives the information</li></ul></li></ul><hr><p>Now, just quickly, I want to recap on why this pattern is actually useful.
<em>Why wouldn't you just check if the entities are on the same team in the <code>attack</code> code, instead of asking?</em></p><p>With this setup, the <code>attack</code> system doesn't <em>know</em> about the concept of teams.
In fact, the concept of "teams" may not even exist, depending on what mods are loaded!</p><p>The attack system is asking a question in an abstract manner, and getting different results
depending on the what mods are loaded.</p><p>This is the exact same thing as event buses, except we are receiving information instead
of dispatching information.</p><h1>Is this pattern useful enough to justify it's existance?</h1><p>It's pretty obvious just from looking at this pattern to see how easily
it could be abused.<br>
It's the same as normal event buses; powerful, yet easy to abuse.</p><p>So, given the abuse potential, is this pattern worth it?</p><p><strong>Yes</strong>, I would say so.<br>
Perhaps this pattern is not useful in other problem spaces, but in UMG where we
literally <strong>NEED</strong> a way to receive information unassumingly, question buses just... <em>chefs kiss.</em></p><p>To demonstrate why, here are some other questions that could be asked:</p><div class="language-lua codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-lua codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">umg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">ask</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"canOpenInventory"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> OR</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> inventory</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">-- whether an inventory can be opened by `ent`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">umg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">ask</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"isHidden"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> OR</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">-- whether `ent` is hidden</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">umg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">ask</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"canUseItem"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> OR ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> itemEnt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">-- whether `ent` can use `itemEnt`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">umg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">ask</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"canRide"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> OR</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> steedEnt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">-- whether `ent` can ride `steedEnt`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">-- a more interesting one:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">umg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">ask</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"getDamageMultiplier"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> MULTIPLICATION</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> ent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> targetEnt</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">-- returns the damage multiplier for `ent`.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">-- Note that the reducer function is multiplication in this case.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">-- This is because we are combining the damage multipliers from all answers.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h1>To conclude:</h1><p>question buses are a cool concept! :)</p><p>Although they can probably be abused very easily, (same as event buses,)
they still provide a very useful pattern for my project.</p><p>Thanks for reading this opinion piece! I hope I opened your mind a bit.</p><ul><li>Oli</li></ul>]]></content:encoded>
            <category>design</category>
            <category>umg</category>
        </item>
        <item>
            <title><![CDATA[Emergence in games]]></title>
            <link>https://your-docusaurus-test-site.com/blog/emergence</link>
            <guid>https://your-docusaurus-test-site.com/blog/emergence</guid>
            <pubDate>Fri, 28 Apr 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Emergence is not needed for a good game. And we know this, because there are]]></description>
            <content:encoded><![CDATA[<p>Emergence is not needed for a good game. And we know this, because there are
plenty of successful games out there that are non-emergent.
(Some examples being: Super Meat Boy, the whole Call of Duty franchise, Mario Kart)</p><p>But as an indie developer, we are in a field where we <strong>NEED</strong> to put ourselves ahead by taking risks.
If we don't, we will be outcompeted by others similar to us.</p><p>Emergence offers us a way to create way more gameplay opportunities, for very little cost.
As an indie dev, creating extra gameplay without needing to expend vast amounts of resources
is very useful.</p><p>But... what <em>IS</em> Emergence in a game context?<br>
Emergence itself is quite hard to define! </p><p>So in this blog post, I'll examine a few examples of good emergence from existing games,
and cherry pick what I think is the good stuff.</p><p>Keep in mind, this is all just my opinion!</p><p>Before we dive into it, though; we need to do some housekeeping.</p><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="lets-discuss-the-golden-rule">Lets discuss the golden rule:<a href="#lets-discuss-the-golden-rule" class="hash-link" aria-label="Direct link to Lets discuss the golden rule:" title="Direct link to Lets discuss the golden rule:">​</a></h2><p>Chess is a highly-emergent game.<br>
Because of this, it has existed for thousands of years, and is one of the most popular
games played by people to this date.</p><p><img loading="lazy" alt="chess" src="/assets/images/chess-059d44a343b5993c40e2c55e7d81bcfa.jpg" width="800" height="800" class="img_ev3q"></p><p>But chess on its own is not very interesting.<br>
Imagine if you were playing 1-player chess, where you just moved the pieces around.
Would that be very fun? (No, it's not fun. And I know it's not fun, because nobody does it.)<br>
I'm using this example, because I want to clarify something important, which I call
"The golden rule":</p><ul><li><em>Emergence on its own won't cut it. You need Emergence, combined with the human mind.</em></li></ul><p>Suddenly, if you have another player on the other side of the board,
plotting their moves, and attempting to discover your tactics,
you have a very interesting and complex game.</p><p>To put it elegantly, emergence in games is not about creating "cooler" or "better" rules;
rather, it's about allowing the player to create their own gameplay THROUGH the rules.<sup id="fnref-1-a54101"><a href="#fn-1-a54101" class="footnote-ref">1</a></sup></p><p>When chess was first created, I can almost guarantee that the Fried-Liver attack did not exist.
Humans created this gameplay element, <em>using</em> the emergent ruleset of chess.</p><hr><p>Now, chess is a simple example that's easy to grasp, but also a very basic, and awkward example.
Since a lot of the gameplay is not actually created by the player, but rather, by the opponent.</p><p>So lets look at another game that allows its players to create gameplay value,
without the need for an opponent:</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="minecraft"><em>Minecraft.</em><a href="#minecraft" class="hash-link" aria-label="Direct link to minecraft" title="Direct link to minecraft">​</a></h2><p>Minecraft is a ground-breaking, brilliant game.
Before minecraft, there was no real sandbox game available to the casual gamer.</p><p>It was so ahead of its time, and its success kinda speaks for itself.</p><p>What I'd like to look at though, is its emergent game rules.
Now, there are 2 distinct examples that I want to pick apart here;
lets not get lost in the weeds though. The two distinct examples are:</p><ul><li>Emergence in building</li><li>Emergence in engineering</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="minecraft--emergence-in-building">Minecraft- Emergence in building:<a href="#minecraft--emergence-in-building" class="hash-link" aria-label="Direct link to Minecraft- Emergence in building:" title="Direct link to Minecraft- Emergence in building:">​</a></h2><p>In minecraft, many players just want to build cool shit.
I'd argue that <em>most</em> players want to do this, actually.</p><ul><li>Take a look at this image:</li></ul><p><img loading="lazy" alt="minecraft" src="/assets/images/minecraft-72da02aa21fc139f4e5a18555e39f740.jpg" width="1024" height="576" class="img_ev3q"></p><p>To a minecraft player, this will look quite normal.
It's a little cottage, with a cute little wooden roof and windows. <br>
On the right are some nice stair blocks leading to a deck.</p><p>But lets slow down a bit; take a look at the sloped roof.
On the roof of the house are ALSO stair blocks, lined up to produce a nice slope.</p><p>In Minecraft, the same blocks can be used in different ways to allow the builder
to express their creativity to a higher degree.</p><p>Look again, at the windows, and the door. Stairs are being used AGAIN,
this time, to provide some depth to the walls, and to provide a rounded entrance.
Remember: stairs are just one block type. Players only need to remember one recipe to
create all this wonderful stuff. Isn't that brilliant? </p><p>One block on its own does not do anything interesting, but multiple blocks
together, <em>combined</em> with the human mind, allows the player to create gameplay
opportunities for themselves.<sup id="fnref-1-a54101"><a href="#fn-1-a54101" class="footnote-ref">1</a></sup></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="minecraft--emergence-in-engineering">Minecraft- Emergence in engineering:<a href="#minecraft--emergence-in-engineering" class="hash-link" aria-label="Direct link to Minecraft- Emergence in engineering:" title="Direct link to Minecraft- Emergence in engineering:">​</a></h2><p>This is a more interesting aspect, but it also gives way to a more important concept that I
want to talk about: <strong><em>Simplicity.</em></strong></p><p>If you are a minecraft player, you have probably seen those videos of huge industrial
mob farms that automatically farm resources for you.</p><p>(If you haven't, quickly google "efficient iron farm" on youtube, you'll see a bunch of unique designs)</p><p>For a second though, lets stop to ponder. Did the developers of minecraft intend for there
to be massive, industrial item-farms?
Maybe! But whatever the case, they <em>definitely</em> did not conceive the designs.</p><p>I'll run briefly how a basic mob-farm may work, by breaking down the systems:</p><ul><li>Water pushes entities in its flow direction</li><li>Mob entities spawn in the dark</li><li>Mob entities drop item entities on death</li><li>Entities with health take damage if they fall a big distance</li></ul><p>With these rules, players can create a chamber that automatically spawns mobs,
pushes them to a cliff, kills the mobs, and transports the dropped items to a safe collection point.</p><p>(Also note that these rules are all independent of one another.
Any one of these rules may be used in another context independently to produce gameplay.)</p><p>These farms are not created because the minecraft devs wanted you to create them.
They are created because the players have a goal: "Get resources".
And with this goal, the players can bend the world to their will, because the rules are emergent enough
to allow it.</p><p>But, we are missing something important. The vast majority of players won't build these giant,
complex, intricately engineered item farms.</p><p>Why not?</p><p>In my opinion, it all comes down to <em>simplicity.</em><br>
If the rules become too difficult to apply in a creative manner, then
a bunch of players are cut off. (either because they aren't patient enough, or they aren't willing
to invest a lot of mental energy in the game.)
These massive, industrial farms are not simple to make; they require quite a deep understanding
of the game systems, and they definitely require a lot of human creativity.</p><p>Remember the golden rule: </p><ul><li><em>Emergence on its own won't cut it. You need Emergence, combined with the human mind.</em></li></ul><p>Players that aren't engaged enough to invest a bunch of time and energy
will fail to create these gameplay opportunities.<sup id="fnref-1-a54101"><a href="#fn-1-a54101" class="footnote-ref">1</a></sup></p><p>To sum it up, it's not about how <em>simple</em> the rules are; rather, it's about how
<em>simply the player can work with them.</em></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="is-minecraft-cheating">Is Minecraft cheating?<a href="#is-minecraft-cheating" class="hash-link" aria-label="Direct link to Is Minecraft cheating?" title="Direct link to Is Minecraft cheating?">​</a></h2><p>Okay, we get it. Minecraft is a brilliant game.<br>
And its success shows it.</p><p>But doesn't it cheat? Minecraft is a sandbox game; of course its going to be highly emergent
when the player can literally alter the world.</p><p>Yes, that's true; sandbox games <em>are</em> naturally emergent.
But Minecraft still does it the best, IMO.<br>
There are many minecraft-like games that have been no-where near as successful,
because they don't provide the player with emergent gameplay opportunities like minecraft does.</p><p>A few examples of this are:</p><ul><li>Eden</li><li>Trove</li><li>Eco</li></ul><p>I've hardly been able to find any "automatic farm" designs for any of these games;
(Or at least, no designs that are out of scope of what the developer intended.)</p><p>Pretty much all existing designs for stuff lay within the developer's closed vision for gameplay,
which is a sign of insufficient emergence.</p><hr><p>Okay, cool.</p><p>So what's an example of emergent gameplay that's NOT within a sandbox context?</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="emergence-in-the-binding-of-isaac">Emergence in the Binding of Isaac<a href="#emergence-in-the-binding-of-isaac" class="hash-link" aria-label="Direct link to Emergence in the Binding of Isaac" title="Direct link to Emergence in the Binding of Isaac">​</a></h2><p><img loading="lazy" alt="isaac" src="/assets/images/isaac-b36f213afe8137e485aaa17a09ff53c4.jpg" width="550" height="309" class="img_ev3q"></p><p>Yup yup, it's this game.
If you play roguelikes, you probably saw this from a mile away.</p><p>The Binding of Isaac has seen years and years of praise, and is (arguably) the
most successful indie roguelike ever.</p><p>But to understand what makes Isaac fun, we need quickly understand the core game:</p><ul><li>Player starts a run with randomly generated levels</li><li>Player fights her way through levels, achieving upgrades and items</li><li>Player either dies, or beats the game in less than 40 minutes</li><li>(Repeat, ad infinitum)</li></ul><p>A lot of the "fun" in Isaac comes from the player's ability to obtain synergies
between items, and make an interesting/powerful combo.</p><p>But how are synergies done? There are hundreds (if not thousands) of roguelikes on the
market that have synergies between items.<br>
What does Isaac do that's special?</p><hr><p>Lets create two imaginary items, <code>Item X</code> and <code>Item Y</code>.</p><p>Now lets assume that items X, Y apply some effect to the player.
In this example, it doesn't matter too much what they actually do;
just know that they do <em>something</em>.</p><p>As a game designer, we might want to add a synergy between <code>X</code> and <code>Y</code>.
So, lets hardcode a little rule:</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Item X synergizes with Item Y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> by granting </span><span class="token number">10</span><span class="token plain"> attack damage</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>But this is terrible.<br>
Why? Why is this terrible?</p><p>This is terrible, because it's a very closed, non-emergent ruleset.<br>
If another item comes along, (i.e. <code>Item Z</code>) it will never be able to mesh
creatively with the existing synergy between <code>X</code> and <code>Y</code>.</p><p>It would be much better to have a system that tags into mechanics instead.
Lets imagine we have a game mechanic "M".
Our setup could look like:</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Item X</span><span class="token operator">:</span><span class="token plain"> provides </span><span class="token string" style="color:rgb(255, 121, 198)">"M"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Item Y</span><span class="token operator">:</span><span class="token plain"> adds attack damage equal to </span><span class="token string" style="color:rgb(255, 121, 198)">"M"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Suddenly, we have a more interesting ruleset on our hands, that provides
the <em>exact same</em> synergy.</p><p><em>Why is this better, though?</em><br>
Well, if we create another item, <code>Item Z</code>, we can mesh <code>Z</code> with the existing
mechanic <code>M</code>:</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Item Z</span><span class="token operator">:</span><span class="token plain"> doubles </span><span class="token string" style="color:rgb(255, 121, 198)">"M"</span><span class="token plain"> when the player is on low health</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Suddenly, we have potential for a synergy between <code>Item Z</code>, and <code>Item Y</code> for free. Isn't that brilliant?<br>
It cost us <em>NOTHING</em> to do this, we literally gained gameplay for free.<br>
Not only this, but any other item that meshes with the existing mechanic "M" will either be a synergy/anti-synergy to <code>Item Z</code> and <code>Item Y</code>.</p><p>The Binding of Isaac does this kind of thing really <em>really</em> well,
by having virtually all passive items tag into game mechanics and mesh with
other items by proxy.</p><p>Here are some examples.<br>
I have listed the mechanic (<code>M</code>) that it tags into, too.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">- Host hat: immune to explosion damage</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">- Kamikaze: creates a damaging explosion next to the player</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">- Glitter bombs: Your explosions spawn pickups</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">- MECHANIC: Explosions</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This synergy gives infinite pickups, free explosions, and a tonne of damage.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">- Brimstone:  Replaces tears with a slow, massive damaging lazer beam</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">- Tammys head:  releases a burst of whatever tear type is active</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">- MECHANIC: Fire rate / tear type</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">- Lump of coal:  Shots deal extra damage based on distance travelled</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">- Tiny planet:  Shots orbit, travelling for way longer</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">- MECHANIC: Shot range / shot trajectory</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Each of these examples provides a cool synergy that is good for the player.</p><p>What's important, is that none of these items directly interact with each other.
Rather, the items mesh with <em>an existing mechanic</em>;
a mechanic that may affect (or be affected) by any other item in the game.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="emergence-as-a-natural-phenomenon">Emergence as a natural phenomenon<a href="#emergence-as-a-natural-phenomenon" class="hash-link" aria-label="Direct link to Emergence as a natural phenomenon" title="Direct link to Emergence as a natural phenomenon">​</a></h2><p>Sometimes, instead of programming game rules directly, it might be best
to work backwards.</p><p>Take a mental note of the intended behaviour,
and develop natural rules to produce that behaviour in the game.</p><p>For example, instead of doing this:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">when bullet entity collides ---&gt; deal damage</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>You could do this:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Fast moving, sharp entities ---&gt; Deal damage</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Bullets ---&gt; Are fast and sharp (so deal damage)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Note that this is also how the real world works.<br>
The real world doesn't care if something is a "bullet", or a "train".
If you get hit by either one at great speeds, you will probably die.</p><p>So the best way to describe this kind of idea, is representing the game
in a more natural format.</p><p>This is both a bad idea, and a good idea.</p><hr><ul><li><em>Why is natural emergence a good idea?</em></li></ul><p>Well, in future, players might be able to come up with creative damage devices.
Such as custom mechanical cannons, or lining up shrapnel near
explosives to kill enemies.</p><p>It opens the game rules, and allows players to think outside of the developer's
box. Remember; it's all about allowing the player to create their own gameplay.<sup id="fnref-1-a54101"><a href="#fn-1-a54101" class="footnote-ref">1</a></sup>
If we provide natural, emergent rules, this is much more viable.</p><ul><li><em>Why is natural emergence a bad idea?</em>
Lets talk about what I call the "Friendly-Fire dilemma".</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="the-friendly-fire-dilemma">The Friendly-Fire dilemma<a href="#the-friendly-fire-dilemma" class="hash-link" aria-label="Direct link to The Friendly-Fire dilemma" title="Direct link to The Friendly-Fire dilemma">​</a></h4><p>Emergent systems are not without costs;<br>
The biggest cost of an emergent game system is the loss of developer control.</p><p>Lets recap on our example from before.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Fast moving, sharp entities ---&gt; Deal damage</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Bullets ---&gt; Are fast and sharp (so deal damage)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Now, lets create a quick example that could be seen in game:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Fast moving, sharp entities ---&gt; Deal damage</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Bullets ---&gt; Are fast and sharp (so deal damage)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Players shoot bullet at zombie, miss and hit friend --&gt; Player kills friend!</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Suddenly, we have a situation where players can accidentally shoot
and kill their friends, which, (at face value,) is bad.</p><p>I call this the "Friendly Fire dilemma".</p><p>To put it frankly, this is the cost that we pay for emergent systems.
Sometimes our rules will have unintended consequences that we cannot solve without
fudging with the rules in an unnatural, non-emergent fashion.<sup id="fnref-2-a54101"><a href="#fn-2-a54101" class="footnote-ref">2</a></sup></p><p>Thankfully, these issues aren't a big deal generally; as players will actively work
<em>WITH</em> the rules to achieve their goal, not against them.<br>
If shooting team-members hurts the chances of meeting a goal,
players probably won't do it.</p><p>Here's a little impromptu equation that describes the whole idea quite nicely:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Emergence * DeveloperControl  =  CONSTANT</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>With every unit of emergence we add, <em>by nature</em>, we lose control as a developer.</p><p>Similar to how John Conway couldn't control the shape of Gosper's Glider gun,
and similar to how the creators of Chess couldn't control how the Sicilian defence worked,
as a developer, you lose control of your game when you create emergent rulesets.</p><p>Note that this isn't neccessarily a "bad" thing.<br>
With chess, the Sicilian defence does not hurt chess's integrity; it's just part of the game.</p><p>Mainly, the loss of developer control is just something to keep in mind :^)</p><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="emergence-in-super-auto-pets">Emergence in Super Auto Pets<a href="#emergence-in-super-auto-pets" class="hash-link" aria-label="Direct link to Emergence in Super Auto Pets" title="Direct link to Emergence in Super Auto Pets">​</a></h2><p>This blog post is getting quite long, but this is still a really good example that I want to cover.
Thankfully, someone else has already done a pretty good analysis on SAP's mechanics that sums up some of my thoughts.</p><p>So instead of doing my own analysis, I am instead going to link that blog post:
<a href="https://a327ex.com/posts/super_auto_pets_mechanics" target="_blank" rel="noopener noreferrer">Have a read if you are extra interested.</a></p><p>One significant takeaway is that unit abilities don't operate in a closed fashion.
Similar to Isaac, abilities mesh with each other in an abstract fashion, which allows players to reason about the
game creatively and come up with their own strategies.</p><p>SAP is also a pretty neat example, since it completely NAILS the simplicity aspect that was
talked about before.</p><h1>TO CONCLUDE:</h1><p>It's not about creating "more interesting" gameplay, or providing
a "more in-depth" experience for the player.</p><p>Rather, it's about providing the player with sufficiently emergent rules, such that they can
create their OWN gameplay.</p><ul><li><em>Emergence on its own won't cut it. You need Emergence, combined with the human mind.</em></li></ul><p>Thanks for reading this opinion piece!</p><ul><li>Oli</li></ul><hr><div class="footnotes"><hr><ol><li id="fn-1-a54101">When I say that a player "Creates gameplay", I mean that the player executes actions, sets goals, or interacts with the game world in a way that the developer did not directly specify. For example, a chess player executing a discovered attack with their knight. The creators of chess did not "create" this mechanic, this mechanic was instead "created" by the players.<a href="#fnref-1-a54101" class="footnote-backref">↩</a></li><li id="fn-2-a54101">YES, we <em>could</em> easily hardcode it so that bullets shot by a player don't harm players. But this kinda goes against the point of emergent rulesets in the first place. The whole point of an emergent ruleset is so that the players can mesh with the rules in a creative fashion! If we put in restrictions like this, we are closing corridors of opportunity. This situation where players can harm their allies? This can also be a GOOD situation, if you look at it a bit differently. Suddenly, friendly-fire is now a mechanic of the game; a mechanic that must be taken into account when approaching levels/situations. Also, fudging with the rules in this fashion is highly unintuitive from a player PoV. Why do my bullets not deal damage to my buddies, but crashing a car into my buddies does deal damage? If we want the player to understand our rules intuitively, fudging with rules like this is a bad idea.<a href="#fnref-2-a54101" class="footnote-backref">↩</a></li></ol></div>]]></content:encoded>
            <category>gamedesign</category>
            <category>opinion</category>
        </item>
    </channel>
</rss>